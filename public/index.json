[{"authors":["admin"],"categories":null,"content":"Bruno Testaguzza Carlin is an student of Data Science at Digital House, previus work experience as an Finance intern for Bayer in the Risk Managment Area.\nExperience using R and BI tools, improving Python skills.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"598b63dd58b43bce02403646f240cd3c","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"author","summary":"Bruno Testaguzza Carlin is an student of Data Science at Digital House, previus work experience as an Finance intern for Bayer in the Risk Managment Area.\nExperience using R and BI tools, improving Python skills.","tags":null,"title":"Bruno Carlin","type":"author"},{"authors":null,"categories":null,"content":"This feature can be used for publishing content such as:\n Project or software documentation Online courses Tutorials  The parent folder may be renamed, for example, to docs for project documentation or course for creating an online course.\nTo disable this feature, either delete the parent folder, or set draft = true in the front matter of all its pages.\nAfter renaming or deleting the parent folder, you may wish to update any [[menu.main]] menu links to it in the config.toml.\n","date":1536462000,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536462000,"objectID":"c3224f3a64174f08aaf31e1f1d16ffd3","permalink":"/tutorial/","publishdate":"2018-09-09T00:00:00-03:00","relpermalink":"/tutorial/","section":"tutorial","summary":"This feature can be used for publishing content such as:\n Project or software documentation Online courses Tutorials  The parent folder may be renamed, for example, to docs for project documentation or course for creating an online course.\nTo disable this feature, either delete the parent folder, or set draft = true in the front matter of all its pages.\nAfter renaming or deleting the parent folder, you may wish to update any [[menu.","tags":null,"title":"Overview","type":"docs"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.\n  Slides can be added in a few ways:\n Create slides using Academic\u0026rsquo;s Slides feature and link using url_slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906560000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906560000,"objectID":"96344c08df50a1b693cc40432115cbe3","permalink":"/talk/example/","publishdate":"2017-01-01T00:00:00-02:00","relpermalink":"/talk/example/","section":"talk","summary":"An example talk using Academic's Markdown slides feature.","tags":[],"title":"Example Talk","type":"talk"},{"authors":null,"categories":["R and Python"],"content":"\rThis is an basic example of how you can use either R or Python to acomplish the same goals, I really enjoy using the tidyverse but as you will see sometimes Python is just the more intuitive option. If you find yourself confused on whether a code chunk is an R or Python code please ask me or check my github page for this project. \r1 Getting Started, we will use multiple functions from both languages\r1.1 How to set up reticulate?\r1.1.1 Setting root folder\r1.1.2 Libraries\r\r\r2 Python\r2.1 Knowing data frames\r2.1.1 Defining pandas series\r2.1.2 Indexing\r\r2.2 Combining two pd series\r2.2.1 Create pd series from dictionary 1\r2.2.2 Combining the pd series into a data frame\r2.2.3 Data frame properties\r2.2.4 Creating some new columns\r2.2.5 Ordering a data frame\r2.2.6 Subsetting\r\r2.3 Real data\r2.3.1 Reading data\r2.3.2 Variable types\r2.3.3 Basic Description\r2.3.4 Subsetting data\r2.3.5 Creating new columns with real data\r2.3.6 Creating a new smaller data frame\r2.3.7 Plotting an line plot\r2.3.8 Filtering and replace data\r2.3.9 Groupby example\r2.3.10 Ploting an histogram\r2.3.11 Handling Missing values\r2.3.12 Replacing names with an dictionary\r\r2.4 Passing Objects\r2.4.1 Python to R\r\r\r3 R\r3.1 Knowing data frames\r3.1.1 Defining an data frame\r3.1.2 Index search\r\r3.2 Creating an data frame from two R series\r3.2.1 Create a date frame using an list\r3.2.2 Create a date frame using an list 2\r3.2.3 Subsetting an data frame using join or cbind\r3.2.4 Some info on our data frame\r3.2.5 Creating new columns using mutate and basic R\r3.2.6 Ordering an data frame using the tidy way arrange or order.\r3.2.7 Filtering rows using standard R code or filter.\r\r3.3 Real Case\r3.3.1 Two way of importing an csv\r3.3.2 Let’s look at our data\r3.3.3 Types of columns r\r3.3.4 Basic Description real data using Glimpse and str\r3.3.5 Subsetting Data with select or base R\r3.3.6 Creating a new smaller data frame using transmute and base\r3.3.7 Ploting with ggplot\r3.3.8 Filtering and replace data\r3.3.9 Groupby example in tidyverse\r3.3.10 Ploting an histogram using ggplot2\r3.3.11 Handling Missing values in R\r3.3.12 Replacing names with an case when aproach\r\r3.4 Passing Objects to Python\r\r\r\rI am currently doing exercises from digital house brasil\n1 Getting Started, we will use multiple functions from both languages\r1.1 How to set up reticulate?\r1.1.1 Setting root folder\rI recommend using the Files tab to find the your system path to the folder containig all the data.\nUse opts_knit to guarantee that your markdown functions will search for files\rin the folder specified, it is better that setwd() because it works on\rall languages.\nknitr::opts_knit$set(root.dir = normalizePath(\r\u0026quot;~/R/Blog TwoSidesData2/content/post/2019/2019-03/2019-03-23/1\u0026quot;))\r\r1.1.2 Libraries\r\rR part\r\rlibrary(reticulate)\rlibrary(caTools)\rlibrary(roperators)\rlibrary(tidyverse)\rset.seed(123)\r\r\rPython part\r\rI am using my second virtual conda if you have just the root\rswitch to conda_list()[[1]][1].\nconda_list()[[1]][2] %\u0026gt;% use_condaenv(required = TRUE)\rLet’s see what version of python this env is running.\nimport platform\rprint(platform.python_version())\r## 3.7.2\rSome basic Data Science Libraries.\nimport numpy as np\rimport matplotlib.pyplot as plt\rimport pandas as pd\rimport os\r\r\r\r\r2 Python\r2.1 Knowing data frames\r2.1.1 Defining pandas series\rdata = pd.Series([0.25, 0.5, 0.75, 1.0])\rdata\r## 0 0.25\r## 1 0.50\r## 2 0.75\r## 3 1.00\r## dtype: float64\rdata.values\r## array([0.25, 0.5 , 0.75, 1. ])\rdata.index\r## RangeIndex(start=0, stop=4, step=1)\rdata[1]\r## 0.5\rdata[1:3]\r## 1 0.50\r## 2 0.75\r## dtype: float64\r\r2.1.2 Indexing\rdata = pd.Series([0.25, 0.5, 0.75, 1.0],\rindex=[\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;])\rdata\r## a 0.25\r## b 0.50\r## c 0.75\r## d 1.00\r## dtype: float64\rdata[\u0026#39;b\u0026#39;]\r## 0.5\r\r\r2.2 Combining two pd series\r2.2.1 Create pd series from dictionary 1\rpopulation_dict = {\u0026#39;California\u0026#39;: 38332521,\r\u0026#39;Florida\u0026#39;: 19552860,\r\u0026#39;Illinois\u0026#39;: 12882135,\r\u0026#39;New York\u0026#39;: 19651127, \u0026#39;Texas\u0026#39;: 26448193,}\rpopulation = pd.Series(population_dict)\rpopulation\r## California 38332521\r## Florida 19552860\r## Illinois 12882135\r## New York 19651127\r## Texas 26448193\r## dtype: int64\rpopulation[\u0026#39;California\u0026#39;]\r## 38332521\rpopulation[\u0026#39;California\u0026#39;:\u0026#39;Illinois\u0026#39;]\r## California 38332521\r## Florida 19552860\r## Illinois 12882135\r## dtype: int64\rone more example.\narea_dict = {\u0026#39;California\u0026#39;: 423967, \u0026#39;Florida\u0026#39;: 170312,\r\u0026#39;Illinois\u0026#39;: 149995,\r\u0026#39;New York\u0026#39;: 141297,\r\u0026#39;Texas\u0026#39;: 695662}\rarea = pd.Series(area_dict)\rarea\r## California 423967\r## Florida 170312\r## Illinois 149995\r## New York 141297\r## Texas 695662\r## dtype: int64\r\r2.2.2 Combining the pd series into a data frame\rstates = pd.DataFrame({\u0026#39;population\u0026#39;: population,\r\u0026#39;area\u0026#39;: area})\rstates\r## population area\r## California 38332521 423967\r## Florida 19552860 170312\r## Illinois 12882135 149995\r## New York 19651127 141297\r## Texas 26448193 695662\rtype(states)\r## \u0026lt;class \u0026#39;pandas.core.frame.DataFrame\u0026#39;\u0026gt;\rtype(states[\u0026quot;population\u0026quot;])\r## \u0026lt;class \u0026#39;pandas.core.series.Series\u0026#39;\u0026gt;\rtype([states[\u0026quot;population\u0026quot;]])\r## \u0026lt;class \u0026#39;list\u0026#39;\u0026gt;\r\r2.2.3 Data frame properties\rstates.shape\r## (5, 2)\rstates.info()\r## \u0026lt;class \u0026#39;pandas.core.frame.DataFrame\u0026#39;\u0026gt;\r## Index: 5 entries, California to Texas\r## Data columns (total 2 columns):\r## population 5 non-null int64\r## area 5 non-null int64\r## dtypes: int64(2)\r## memory usage: 280.0+ bytes\rstates.index\r## Index([\u0026#39;California\u0026#39;, \u0026#39;Florida\u0026#39;, \u0026#39;Illinois\u0026#39;, \u0026#39;New York\u0026#39;, \u0026#39;Texas\u0026#39;], dtype=\u0026#39;object\u0026#39;)\rstates.columns\r## Index([\u0026#39;population\u0026#39;, \u0026#39;area\u0026#39;], dtype=\u0026#39;object\u0026#39;)\rstates[\u0026#39;area\u0026#39;]\r## California 423967\r## Florida 170312\r## Illinois 149995\r## New York 141297\r## Texas 695662\r## Name: area, dtype: int64\r\r2.2.4 Creating some new columns\rstates[\u0026#39;density\u0026#39;] = states[\u0026#39;population\u0026#39;] / states[\u0026#39;area\u0026#39;]\rstates\r## population area density\r## California 38332521 423967 90.413926\r## Florida 19552860 170312 114.806121\r## Illinois 12882135 149995 85.883763\r## New York 19651127 141297 139.076746\r## Texas 26448193 695662 38.018740\r\r2.2.5 Ordering a data frame\rstates.sort_values([\u0026#39;population\u0026#39;], ascending = True)\r## population area density\r## Illinois 12882135 149995 85.883763\r## Florida 19552860 170312 114.806121\r## New York 19651127 141297 139.076746\r## Texas 26448193 695662 38.018740\r## California 38332521 423967 90.413926\rstates.sort_values([\u0026#39;area\u0026#39;], ascending = True)\r## population area density\r## New York 19651127 141297 139.076746\r## Illinois 12882135 149995 85.883763\r## Florida 19552860 170312 114.806121\r## California 38332521 423967 90.413926\r## Texas 26448193 695662 38.018740\rstates.sort_values([\u0026#39;density\u0026#39;], ascending = True)\r## population area density\r## Texas 26448193 695662 38.018740\r## Illinois 12882135 149995 85.883763\r## California 38332521 423967 90.413926\r## Florida 19552860 170312 114.806121\r## New York 19651127 141297 139.076746\r\r2.2.6 Subsetting\rstates[\u0026#39;Florida\u0026#39;:\u0026#39;Illinois\u0026#39;]\r## population area density\r## Florida 19552860 170312 114.806121\r## Illinois 12882135 149995 85.883763\rstates[1:3]\r## population area density\r## Florida 19552860 170312 114.806121\r## Illinois 12882135 149995 85.883763\rdata_pop = (states[\u0026#39;population\u0026#39;] \u0026gt; 19552860) \u0026amp; (states[\u0026#39;area\u0026#39;]\u0026gt;423967)\rdata_pop\r## California False\r## Florida False\r## Illinois False\r## New York False\r## Texas True\r## dtype: bool\rstates[(states[\u0026#39;population\u0026#39;] \u0026gt; 19552860) \u0026amp; (states[\u0026#39;area\u0026#39;]\u0026gt;423967)]\r## population area density\r## Texas 26448193 695662 38.01874\rstates[[\u0026#39;area\u0026#39;,\u0026#39;density\u0026#39;]]\r## area density\r## California 423967 90.413926\r## Florida 170312 114.806121\r## Illinois 149995 85.883763\r## New York 141297 139.076746\r## Texas 695662 38.018740\rstates[states.density \u0026gt; 100]\r## population area density\r## Florida 19552860 170312 114.806121\r## New York 19651127 141297 139.076746\rstates.loc[states.density \u0026gt; 100, [\u0026#39;population\u0026#39;, \u0026#39;density\u0026#39;]]\r## population density\r## Florida 19552860 114.806121\r## New York 19651127 139.076746\rstates.loc[states.density \u0026gt; 100][[\u0026#39;population\u0026#39;, \u0026#39;density\u0026#39;]]\r## population density\r## Florida 19552860 114.806121\r## New York 19651127 139.076746\rstates.loc[\u0026#39;California\u0026#39;, \u0026#39;density\u0026#39;]\r## 90.41392608386974\rstates.loc[\u0026#39;California\u0026#39;][[\u0026#39;density\u0026#39;]]\r## density 90.413926\r## Name: California, dtype: float64\rstates.iloc[0, 2]\r## 90.41392608386974\r\r\r2.3 Real data\r2.3.1 Reading data\rsales = pd.DataFrame(pd.read_csv(\u0026#39;data/2019-03-23-exploratory-data-analysis-basic-pandas-and-dplyr/UKretail.csv\u0026#39;,encoding=\u0026#39;latin\u0026#39;))\rsales.head()\r## InvoiceNo StockCode ... CustomerID Country\r## 0 536365 22752 ... 17850.0 United Kingdom\r## 1 536365 71053 ... 17850.0 United Kingdom\r## 2 536365 84029G ... 17850.0 United Kingdom\r## 3 536365 85123A ... 17850.0 United Kingdom\r## 4 536366 22633 ... 17850.0 United Kingdom\r## ## [5 rows x 8 columns]\rsales.tail(3)\r## InvoiceNo StockCode ... CustomerID Country\r## 325142 581587 22899 ... 12680.0 France\r## 325143 581587 23254 ... 12680.0 France\r## 325144 581587 23256 ... 12680.0 France\r## ## [3 rows x 8 columns]\rsales.index\r## RangeIndex(start=0, stop=325145, step=1)\r\r2.3.2 Variable types\rIf you need to return.\ntype(sales)\r\r## \u0026lt;class \u0026#39;pandas.core.frame.DataFrame\u0026#39;\u0026gt;\rtype(sales[\u0026quot;CustomerID\u0026quot;])\r## \u0026lt;class \u0026#39;pandas.core.series.Series\u0026#39;\u0026gt;\rtype([sales[\u0026quot;CustomerID\u0026quot;]])\r\r## \u0026lt;class \u0026#39;list\u0026#39;\u0026gt;\r\r2.3.3 Basic Description\rsales.shape\r\r## (325145, 8)\rsales.columns.values\r\r## array([\u0026#39;InvoiceNo\u0026#39;, \u0026#39;StockCode\u0026#39;, \u0026#39;Description\u0026#39;, \u0026#39;Quantity\u0026#39;, \u0026#39;InvoiceDate\u0026#39;,\r## \u0026#39;UnitPrice\u0026#39;, \u0026#39;CustomerID\u0026#39;, \u0026#39;Country\u0026#39;], dtype=object)\rsales.info()\r\r## \u0026lt;class \u0026#39;pandas.core.frame.DataFrame\u0026#39;\u0026gt;\r## RangeIndex: 325145 entries, 0 to 325144\r## Data columns (total 8 columns):\r## InvoiceNo 325145 non-null object\r## StockCode 325145 non-null object\r## Description 324275 non-null object\r## Quantity 325145 non-null int64\r## InvoiceDate 325145 non-null object\r## UnitPrice 325145 non-null float64\r## CustomerID 244154 non-null float64\r## Country 325145 non-null object\r## dtypes: float64(2), int64(1), object(5)\r## memory usage: 19.8+ MB\rsales.describe()\r## Quantity UnitPrice CustomerID\r## count 325145.000000 325145.000000 244154.000000\r## mean 9.273340 4.845239 15288.823120\r## std 154.394112 116.830451 1713.496816\r## min -80995.000000 -11062.060000 12347.000000\r## 25% 1.000000 1.250000 13959.000000\r## 50% 3.000000 2.080000 15150.000000\r## 75% 10.000000 4.130000 16792.750000\r## max 12540.000000 38970.000000 18287.000000\r\r2.3.4 Subsetting data\rsales[:4]\r## InvoiceNo StockCode ... CustomerID Country\r## 0 536365 22752 ... 17850.0 United Kingdom\r## 1 536365 71053 ... 17850.0 United Kingdom\r## 2 536365 84029G ... 17850.0 United Kingdom\r## 3 536365 85123A ... 17850.0 United Kingdom\r## ## [4 rows x 8 columns]\rsales[\u0026quot;CustomerID\u0026quot;].head()\r## 0 17850.0\r## 1 17850.0\r## 2 17850.0\r## 3 17850.0\r## 4 17850.0\r## Name: CustomerID, dtype: float64\rsales.loc[:,[\u0026#39;Quantity\u0026#39;]].head()\r## Quantity\r## 0 2\r## 1 6\r## 2 6\r## 3 6\r## 4 6\rsales.iloc[:,[3]].head()\r## Quantity\r## 0 2\r## 1 6\r## 2 6\r## 3 6\r## 4 6\rsales.iloc[0:6,2:3]\r## Description\r## 0 SET 7 BABUSHKA NESTING BOXES\r## 1 WHITE METAL LANTERN\r## 2 KNITTED UNION FLAG HOT WATER BOTTLE\r## 3 WHITE HANGING HEART T-LIGHT HOLDER\r## 4 HAND WARMER UNION JACK\r## 5 HOME BUILDING BLOCK WORD\r\r2.3.5 Creating new columns with real data\rsales[\u0026quot;Revenue\u0026quot;] = sales.Quantity * sales.UnitPrice\rsales.head()\r## InvoiceNo StockCode ... Country Revenue\r## 0 536365 22752 ... United Kingdom 15.30\r## 1 536365 71053 ... United Kingdom 20.34\r## 2 536365 84029G ... United Kingdom 20.34\r## 3 536365 85123A ... United Kingdom 15.30\r## 4 536366 22633 ... United Kingdom 11.10\r## ## [5 rows x 9 columns]\r\r2.3.6 Creating a new smaller data frame\rraw_sales = sales[[\u0026quot;Quantity\u0026quot;,\u0026quot;UnitPrice\u0026quot;, \u0026quot;Revenue\u0026quot;]]\rraw_sales.head()\r## Quantity UnitPrice Revenue\r## 0 2 7.65 15.30\r## 1 6 3.39 20.34\r## 2 6 3.39 20.34\r## 3 6 2.55 15.30\r## 4 6 1.85 11.10\rraw_sales.info()\r## \u0026lt;class \u0026#39;pandas.core.frame.DataFrame\u0026#39;\u0026gt;\r## RangeIndex: 325145 entries, 0 to 325144\r## Data columns (total 3 columns):\r## Quantity 325145 non-null int64\r## UnitPrice 325145 non-null float64\r## Revenue 325145 non-null float64\r## dtypes: float64(2), int64(1)\r## memory usage: 7.4 MB\r\r2.3.7 Plotting an line plot\rimport matplotlib as plt\rfrom pylab import *\rsales.plot(x=\u0026quot;InvoiceDate\u0026quot;, y=\u0026quot;Revenue\u0026quot;, kind=\u0026quot;line\u0026quot;)\rplt.show()\r\r2.3.8 Filtering and replace data\rTo return\ncancels = sales[sales[\u0026quot;Revenue\u0026quot;]\u0026lt;0]\rcancels.shape\r## (5588, 9)\rsales.drop(cancels.index, inplace=True)\rsales.shape\r## (319557, 9)\r\r2.3.9 Groupby example\rCountryGroups = sales.groupby([\u0026quot;Country\u0026quot;])[\u0026quot;Revenue\u0026quot;].sum().reset_index()\rCountryGroups.sort_values(by= \u0026quot;Revenue\u0026quot;, ascending=False)\r## Country Revenue\r## 36 United Kingdom 5311080.101\r## 10 EIRE 176304.590\r## 24 Netherlands 165582.790\r## 14 Germany 138778.440\r## 13 France 127193.680\r## 0 Australia 79197.590\r## 31 Spain 36116.710\r## 33 Switzerland 34315.240\r## 3 Belgium 24014.970\r## 25 Norway 23182.220\r## 32 Sweden 21762.450\r## 20 Japan 21072.590\r## 27 Portugal 20109.410\r## 30 Singapore 13383.590\r## 6 Channel Islands 12556.740\r## 12 Finland 12362.880\r## 9 Denmark 11739.370\r## 19 Italy 10837.890\r## 16 Hong Kong 8227.020\r## 7 Cyprus 7781.900\r## 1 Austria 6100.960\r## 18 Israel 4225.780\r## 26 Poland 3974.080\r## 37 Unspecified 2898.650\r## 15 Greece 2677.570\r## 17 Iceland 2461.230\r## 34 USA 2388.740\r## 5 Canada 2093.390\r## 23 Malta 1318.990\r## 35 United Arab Emirates 1277.500\r## 21 Lebanon 1120.530\r## 22 Lithuania 1038.560\r## 11 European Community 876.550\r## 4 Brazil 602.310\r## 28 RSA 573.180\r## 8 Czech Republic 488.580\r## 2 Bahrain 343.400\r## 29 Saudi Arabia 90.720\r\r2.3.10 Ploting an histogram\rsales[sales[\u0026quot;CustomerID\u0026quot;] == 17850.0][\u0026quot;Revenue\u0026quot;].plot(kind=\u0026quot;hist\u0026quot;)\rplt.show()\ranother example.\nsales[sales[\u0026quot;StockCode\u0026quot;] == \u0026#39;71053\u0026#39;][\u0026quot;Quantity\u0026quot;].hist()\rplt.show()\r\r2.3.11 Handling Missing values\rto return\nsales.info()\r## \u0026lt;class \u0026#39;pandas.core.frame.DataFrame\u0026#39;\u0026gt;\r## Int64Index: 319557 entries, 0 to 325144\r## Data columns (total 9 columns):\r## InvoiceNo 319557 non-null object\r## StockCode 319557 non-null object\r## Description 318687 non-null object\r## Quantity 319557 non-null int64\r## InvoiceDate 319557 non-null object\r## UnitPrice 319557 non-null float64\r## CustomerID 238801 non-null float64\r## Country 319557 non-null object\r## Revenue 319557 non-null float64\r## dtypes: float64(3), int64(1), object(5)\r## memory usage: 24.4+ MB\rsales.CustomerID.value_counts(dropna=False).nlargest(3)\r## NaN 80756\r## 17841.0 4702\r## 14911.0 3449\r## Name: CustomerID, dtype: int64\rsales.CustomerID.fillna(0, inplace=True)\rsales[sales.CustomerID.isnull()]\r## Empty DataFrame\r## Columns: [InvoiceNo, StockCode, Description, Quantity, InvoiceDate, UnitPrice, CustomerID, Country, Revenue]\r## Index: []\rsales.info()\r## \u0026lt;class \u0026#39;pandas.core.frame.DataFrame\u0026#39;\u0026gt;\r## Int64Index: 319557 entries, 0 to 325144\r## Data columns (total 9 columns):\r## InvoiceNo 319557 non-null object\r## StockCode 319557 non-null object\r## Description 318687 non-null object\r## Quantity 319557 non-null int64\r## InvoiceDate 319557 non-null object\r## UnitPrice 319557 non-null float64\r## CustomerID 319557 non-null float64\r## Country 319557 non-null object\r## Revenue 319557 non-null float64\r## dtypes: float64(3), int64(1), object(5)\r## memory usage: 24.4+ MB\r\r2.3.12 Replacing names with an dictionary\rmymap = {\u0026#39;United Kingdom\u0026#39;:1, \u0026#39;Netherlands\u0026#39;:2, \u0026#39;Germany\u0026#39;:3, \u0026#39;France\u0026#39;:4, \u0026#39;USA\u0026#39;:5} sales = sales.applymap(lambda s: mymap.get(s) if s in mymap else s)\rsales.head()\r## InvoiceNo StockCode ... Country Revenue\r## 0 536365 22752 ... 1 15.30\r## 1 536365 71053 ... 1 20.34\r## 2 536365 84029G ... 1 20.34\r## 3 536365 85123A ... 1 15.30\r## 4 536366 22633 ... 1 11.10\r## ## [5 rows x 9 columns]\rsales.Country.value_counts().nlargest(7)\r## 1 292640\r## 3 5466\r## 4 5026\r## EIRE 4789\r## Spain 1420\r## 2 1393\r## Belgium 1191\r## Name: Country, dtype: int64\r\r\r2.4 Passing Objects\r2.4.1 Python to R\rdata2 = pd.Series([0.25, 0.5, 0.75, 1.0])\rdata_t = py$data2\rdata_t\r## 0 1 2 3 ## 0.25 0.50 0.75 1.00\r\r\r\r3 R\r3.1 Knowing data frames\r3.1.1 Defining an data frame\rtidy way data \u0026lt;- tibble(0.25, 0.5, 0.75, 1.0)\rdata\r## # A tibble: 1 x 4\r## `0.25` `0.5` `0.75` `1`\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 0.25 0.5 0.75 1\rdata[2]\r## # A tibble: 1 x 1\r## `0.5`\r## \u0026lt;dbl\u0026gt;\r## 1 0.5\rdata[2:3]\r## # A tibble: 1 x 2\r## `0.5` `0.75`\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 0.5 0.75\rNot using tidyverse.\ndata \u0026lt;- data.frame(c(0.25, 0.5, 0.75, 1.0))\rrownames(data) \u0026lt;- 1:nrow(data)\rcolnames(data) \u0026lt;- \u0026quot;nope\u0026quot;\rdata\r## nope\r## 1 0.25\r## 2 0.50\r## 3 0.75\r## 4 1.00\r\r3.1.2 Index search\rdata \u0026lt;- data.frame(c(0.25, 0.5, 0.75, 1.0),row.names = c(\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;,\u0026quot;c\u0026quot;,\u0026quot;d\u0026quot;))\rdata\r## c.0.25..0.5..0.75..1.\r## a 0.25\r## b 0.50\r## c 0.75\r## d 1.00\rdata[\u0026quot;b\u0026quot;,]\r## [1] 0.5\r\r\r3.2 Creating an data frame from two R series\r3.2.1 Create a date frame using an list\rpopulation_dict \u0026lt;- list(\r\u0026#39;California\u0026#39; = 38332521,\r\u0026#39;Florida\u0026#39; = 19552860,\r\u0026#39;Illinois\u0026#39; = 12882135,\r\u0026#39;New York\u0026#39; = 19651127,\r\u0026#39;Texas\u0026#39; = 26448193\r)\rpopulation \u0026lt;- population_dict %\u0026gt;% as_tibble()\rpopulation[\u0026#39;California\u0026#39;]\r## # A tibble: 1 x 1\r## California\r## \u0026lt;dbl\u0026gt;\r## 1 38332521\rpopulation %\u0026gt;% select(California:Illinois)\r## # A tibble: 1 x 3\r## California Florida Illinois\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 38332521 19552860 12882135\r\r3.2.2 Create a date frame using an list 2\rarea_dict = list(\r\u0026#39;California\u0026#39; = 423967, \u0026#39;Florida\u0026#39; = 170312,\r\u0026#39;Illinois\u0026#39; = 149995,\r\u0026#39;New York\u0026#39; = 141297,\r\u0026#39;Texas\u0026#39; = 695662\r)\rarea_dict %\u0026gt;% as_tibble() -\u0026gt; area\rarea\r## # A tibble: 1 x 5\r## California Florida Illinois `New York` Texas\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 423967 170312 149995 141297 695662\r\r3.2.3 Subsetting an data frame using join or cbind\rThe tidy way doesn`t support indexes so we can tidy our data.\ntidy_area \u0026lt;- area %\u0026gt;% gather(key = \u0026quot;state\u0026quot;, value = \u0026quot;area\u0026quot;)\rtidy_state \u0026lt;- population %\u0026gt;% gather(key = \u0026quot;state\u0026quot;, value = \u0026quot;population\u0026quot;)\rtidy_area\r## # A tibble: 5 x 2\r## state area\r## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 California 423967\r## 2 Florida 170312\r## 3 Illinois 149995\r## 4 New York 141297\r## 5 Texas 695662\rtidy_state\r## # A tibble: 5 x 2\r## state population\r## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 California 38332521\r## 2 Florida 19552860\r## 3 Illinois 12882135\r## 4 New York 19651127\r## 5 Texas 26448193\rtidy_area %\u0026gt;% left_join(tidy_state)\r## Joining, by = \u0026quot;state\u0026quot;\r## # A tibble: 5 x 3\r## state area population\r## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 California 423967 38332521\r## 2 Florida 170312 19552860\r## 3 Illinois 149995 12882135\r## 4 New York 141297 19651127\r## 5 Texas 695662 26448193\rtidy_merge \u0026lt;- cbind(tidy_area,tidy_state[,-1])\rstates \u0026lt;- tidy_merge\r\r3.2.4 Some info on our data frame\rclass(tidy_merge)\r## [1] \u0026quot;data.frame\u0026quot;\rclass(tidy_merge$population)\r## [1] \u0026quot;numeric\u0026quot;\rclass(list(tidy_merge[\u0026quot;population\u0026quot;]))\r## [1] \u0026quot;list\u0026quot;\rstates %\u0026gt;% dim()\r## [1] 5 3\rstates %\u0026gt;% str()\r## \u0026#39;data.frame\u0026#39;: 5 obs. of 3 variables:\r## $ state : chr \u0026quot;California\u0026quot; \u0026quot;Florida\u0026quot; \u0026quot;Illinois\u0026quot; \u0026quot;New York\u0026quot; ...\r## $ area : num 423967 170312 149995 141297 695662\r## $ population: num 38332521 19552860 12882135 19651127 26448193\rstates %\u0026gt;% glimpse()\r## Observations: 5\r## Variables: 3\r## $ state \u0026lt;chr\u0026gt; \u0026quot;California\u0026quot;, \u0026quot;Florida\u0026quot;, \u0026quot;Illinois\u0026quot;, \u0026quot;New York\u0026quot;, \u0026quot;T...\r## $ area \u0026lt;dbl\u0026gt; 423967, 170312, 149995, 141297, 695662\r## $ population \u0026lt;dbl\u0026gt; 38332521, 19552860, 12882135, 19651127, 26448193\rstates[[\u0026quot;Estado\u0026quot;]]\r## NULL\rstates %\u0026gt;% colnames() %\u0026gt;% tail(-1)\r## [1] \u0026quot;area\u0026quot; \u0026quot;population\u0026quot;\rstates$area\r## [1] 423967 170312 149995 141297 695662\r\r3.2.5 Creating new columns using mutate and basic R\rstates$density \u0026lt;- states$population / states$area\rstates\r## state area population density\r## 1 California 423967 38332521 90.41393\r## 2 Florida 170312 19552860 114.80612\r## 3 Illinois 149995 12882135 85.88376\r## 4 New York 141297 19651127 139.07675\r## 5 Texas 695662 26448193 38.01874\r# or\rstates$density \u0026lt;- states[[\u0026quot;population\u0026quot;]] / states[[\u0026quot;area\u0026quot;]]\rstates\r## state area population density\r## 1 California 423967 38332521 90.41393\r## 2 Florida 170312 19552860 114.80612\r## 3 Illinois 149995 12882135 85.88376\r## 4 New York 141297 19651127 139.07675\r## 5 Texas 695662 26448193 38.01874\r#or\rstates %\u0026gt;% mutate(density = population / area)\r## state area population density\r## 1 California 423967 38332521 90.41393\r## 2 Florida 170312 19552860 114.80612\r## 3 Illinois 149995 12882135 85.88376\r## 4 New York 141297 19651127 139.07675\r## 5 Texas 695662 26448193 38.01874\r\r3.2.6 Ordering an data frame using the tidy way arrange or order.\rYou can also use -c() or desc() sometimes -c() can give strange results.\nstates %\u0026gt;% arrange(desc(population))\r## state area population density\r## 1 California 423967 38332521 90.41393\r## 2 Texas 695662 26448193 38.01874\r## 3 New York 141297 19651127 139.07675\r## 4 Florida 170312 19552860 114.80612\r## 5 Illinois 149995 12882135 85.88376\rstates[order(states$area),]\r## state area population density\r## 4 New York 141297 19651127 139.07675\r## 3 Illinois 149995 12882135 85.88376\r## 2 Florida 170312 19552860 114.80612\r## 1 California 423967 38332521 90.41393\r## 5 Texas 695662 26448193 38.01874\r# Mix and match all three formas\rstates %\u0026gt;% arrange(-c(density),desc(population,area),state)\r## state area population density\r## 1 New York 141297 19651127 139.07675\r## 2 Florida 170312 19552860 114.80612\r## 3 California 423967 38332521 90.41393\r## 4 Illinois 149995 12882135 85.88376\r## 5 Texas 695662 26448193 38.01874\r\r3.2.7 Filtering rows using standard R code or filter.\rstates[1:3,]\r## state area population density\r## 1 California 423967 38332521 90.41393\r## 2 Florida 170312 19552860 114.80612\r## 3 Illinois 149995 12882135 85.88376\rdata_pop \u0026lt;- states[states$population \u0026gt; 19552860 \u0026amp; states$area \u0026gt; 423967,]\rdata_pop\r## state area population density\r## 5 Texas 695662 26448193 38.01874\rstates %\u0026gt;% filter(population \u0026gt; 19552860 \u0026amp; area \u0026gt; 423967)\r## state area population density\r## 1 Texas 695662 26448193 38.01874\ryou can mix and match filter for rows and select for columns.\nstates %\u0026gt;% filter(density \u0026gt; 100)\r## state area population density\r## 1 Florida 170312 19552860 114.8061\r## 2 New York 141297 19651127 139.0767\rstates %\u0026gt;%\rfilter(density \u0026gt; 100) %\u0026gt;% select(population,density)\r## population density\r## 1 19552860 114.8061\r## 2 19651127 139.0767\rstates[1,4]\r## [1] 90.41393\r\r\r3.3 Real Case\r3.3.1 Two way of importing an csv\rsales \u0026lt;- read_csv(\u0026#39;data/2019-03-23-exploratory-data-analysis-basic-pandas-and-dplyr/UKretail.csv\u0026#39;)\r## Parsed with column specification:\r## cols(\r## InvoiceNo = col_character(),\r## StockCode = col_character(),\r## Description = col_character(),\r## Quantity = col_double(),\r## InvoiceDate = col_datetime(format = \u0026quot;\u0026quot;),\r## UnitPrice = col_double(),\r## CustomerID = col_double(),\r## Country = col_character()\r## )\rsales \u0026lt;- read.csv(\u0026#39;data/2019-03-23-exploratory-data-analysis-basic-pandas-and-dplyr/UKretail.csv\u0026#39;)\rIf you think this looks like an ugly path and a was of space I would agree we\rcan fix this by using one of my favorite thinks from python the \"\"key I avoided.\nI am now using it on the python part to show the power of neat line.\npath_file = \u0026#39;data/\\\r2019-03-23-exploratory-data-analysis-basic-pandas-and-dplyr/\\\rUKretail.csv\u0026#39; \rsales \u0026lt;- read_csv(py$path_file)\r## Parsed with column specification:\r## cols(\r## InvoiceNo = col_character(),\r## StockCode = col_character(),\r## Description = col_character(),\r## Quantity = col_double(),\r## InvoiceDate = col_datetime(format = \u0026quot;\u0026quot;),\r## UnitPrice = col_double(),\r## CustomerID = col_double(),\r## Country = col_character()\r## )\rFinally our first usefull python to r functionality!\n\r3.3.2 Let’s look at our data\rsales %\u0026gt;% head()\r## # A tibble: 6 x 8\r## InvoiceNo StockCode Description Quantity InvoiceDate UnitPrice\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dttm\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 536365 22752 SET 7 BABU~ 2 2010-12-01 08:26:02 7.65\r## 2 536365 71053 WHITE META~ 6 2010-12-01 08:26:02 3.39\r## 3 536365 84029G KNITTED UN~ 6 2010-12-01 08:26:02 3.39\r## 4 536365 85123A WHITE HANG~ 6 2010-12-01 08:26:02 2.55\r## 5 536366 22633 HAND WARME~ 6 2010-12-01 08:28:02 1.85\r## 6 536367 21754 HOME BUILD~ 3 2010-12-01 08:33:59 5.95\r## # ... with 2 more variables: CustomerID \u0026lt;dbl\u0026gt;, Country \u0026lt;chr\u0026gt;\rsales %\u0026gt;% tail(3)\r## # A tibble: 3 x 8\r## InvoiceNo StockCode Description Quantity InvoiceDate UnitPrice\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dttm\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 581587 22899 CHILDREN\u0026#39;S~ 6 2011-12-09 12:49:59 2.1 ## 2 581587 23254 CHILDRENS ~ 4 2011-12-09 12:49:59 4.15\r## 3 581587 23256 CHILDRENS ~ 4 2011-12-09 12:49:59 4.15\r## # ... with 2 more variables: CustomerID \u0026lt;dbl\u0026gt;, Country \u0026lt;chr\u0026gt;\r\r3.3.3 Types of columns r\rIf you payed attention read_ tries to inform what conversion was used in each column that is specially cool because base R tends to create unesceassary factor whne in fact you are working with strings, but know you can choose between three different implementation of the read command.\nA cool thing about tibbles is that they are in fact still data.frame.\nsales %\u0026gt;% class()\r## [1] \u0026quot;spec_tbl_df\u0026quot; \u0026quot;tbl_df\u0026quot; \u0026quot;tbl\u0026quot; \u0026quot;data.frame\u0026quot;\rPay attention to the R difference between “[[” and “[” if you recall this is the “opposite” of the python behavior.\nJump to python implementation.\nsales[[\u0026quot;CustomerID\u0026quot;]] %\u0026gt;% class()\r## [1] \u0026quot;numeric\u0026quot;\rsales[\u0026quot;CustomerID\u0026quot;] %\u0026gt;% class()\r## [1] \u0026quot;tbl_df\u0026quot; \u0026quot;tbl\u0026quot; \u0026quot;data.frame\u0026quot;\r\r3.3.4 Basic Description real data using Glimpse and str\rsales %\u0026gt;% dim()\r## [1] 325145 8\rsales %\u0026gt;% colnames()\r## [1] \u0026quot;InvoiceNo\u0026quot; \u0026quot;StockCode\u0026quot; \u0026quot;Description\u0026quot; \u0026quot;Quantity\u0026quot; \u0026quot;InvoiceDate\u0026quot;\r## [6] \u0026quot;UnitPrice\u0026quot; \u0026quot;CustomerID\u0026quot; \u0026quot;Country\u0026quot;\rsales %\u0026gt;% glimpse()\r## Observations: 325,145\r## Variables: 8\r## $ InvoiceNo \u0026lt;chr\u0026gt; \u0026quot;536365\u0026quot;, \u0026quot;536365\u0026quot;, \u0026quot;536365\u0026quot;, \u0026quot;536365\u0026quot;, \u0026quot;536366\u0026quot;, ...\r## $ StockCode \u0026lt;chr\u0026gt; \u0026quot;22752\u0026quot;, \u0026quot;71053\u0026quot;, \u0026quot;84029G\u0026quot;, \u0026quot;85123A\u0026quot;, \u0026quot;22633\u0026quot;, \u0026quot;21...\r## $ Description \u0026lt;chr\u0026gt; \u0026quot;SET 7 BABUSHKA NESTING BOXES\u0026quot;, \u0026quot;WHITE METAL LANTE...\r## $ Quantity \u0026lt;dbl\u0026gt; 2, 6, 6, 6, 6, 3, 3, 4, 6, 6, 6, 8, 4, 3, 3, 48, 2...\r## $ InvoiceDate \u0026lt;dttm\u0026gt; 2010-12-01 08:26:02, 2010-12-01 08:26:02, 2010-12...\r## $ UnitPrice \u0026lt;dbl\u0026gt; 7.65, 3.39, 3.39, 2.55, 1.85, 5.95, 5.95, 7.95, 1....\r## $ CustomerID \u0026lt;dbl\u0026gt; 17850, 17850, 17850, 17850, 17850, 13047, 13047, 1...\r## $ Country \u0026lt;chr\u0026gt; \u0026quot;United Kingdom\u0026quot;, \u0026quot;United Kingdom\u0026quot;, \u0026quot;United Kingdo...\rsales %\u0026gt;% str()\r## Classes \u0026#39;spec_tbl_df\u0026#39;, \u0026#39;tbl_df\u0026#39;, \u0026#39;tbl\u0026#39; and \u0026#39;data.frame\u0026#39;: 325145 obs. of 8 variables:\r## $ InvoiceNo : chr \u0026quot;536365\u0026quot; \u0026quot;536365\u0026quot; \u0026quot;536365\u0026quot; \u0026quot;536365\u0026quot; ...\r## $ StockCode : chr \u0026quot;22752\u0026quot; \u0026quot;71053\u0026quot; \u0026quot;84029G\u0026quot; \u0026quot;85123A\u0026quot; ...\r## $ Description: chr \u0026quot;SET 7 BABUSHKA NESTING BOXES\u0026quot; \u0026quot;WHITE METAL LANTERN\u0026quot; \u0026quot;KNITTED UNION FLAG HOT WATER BOTTLE\u0026quot; \u0026quot;WHITE HANGING HEART T-LIGHT HOLDER\u0026quot; ...\r## $ Quantity : num 2 6 6 6 6 3 3 4 6 6 ...\r## $ InvoiceDate: POSIXct, format: \u0026quot;2010-12-01 08:26:02\u0026quot; \u0026quot;2010-12-01 08:26:02\u0026quot; ...\r## $ UnitPrice : num 7.65 3.39 3.39 2.55 1.85 5.95 5.95 7.95 1.65 2.1 ...\r## $ CustomerID : num 17850 17850 17850 17850 17850 ...\r## $ Country : chr \u0026quot;United Kingdom\u0026quot; \u0026quot;United Kingdom\u0026quot; \u0026quot;United Kingdom\u0026quot; \u0026quot;United Kingdom\u0026quot; ...\r## - attr(*, \u0026quot;spec\u0026quot;)=\r## .. cols(\r## .. InvoiceNo = col_character(),\r## .. StockCode = col_character(),\r## .. Description = col_character(),\r## .. Quantity = col_double(),\r## .. InvoiceDate = col_datetime(format = \u0026quot;\u0026quot;),\r## .. UnitPrice = col_double(),\r## .. CustomerID = col_double(),\r## .. Country = col_character()\r## .. )\rsales %\u0026gt;% summary()\r## InvoiceNo StockCode Description ## Length:325145 Length:325145 Length:325145 ## Class :character Class :character Class :character ## Mode :character Mode :character Mode :character ## ## ## ## ## Quantity InvoiceDate UnitPrice ## Min. :-80995.00 Min. :2010-12-01 08:26:02 Min. :-11062.06 ## 1st Qu.: 1.00 1st Qu.:2011-03-28 12:13:02 1st Qu.: 1.25 ## Median : 3.00 Median :2011-07-20 10:50:59 Median : 2.08 ## Mean : 9.27 Mean :2011-07-04 14:11:43 Mean : 4.85 ## 3rd Qu.: 10.00 3rd Qu.:2011-10-19 10:47:59 3rd Qu.: 4.13 ## Max. : 12540.00 Max. :2011-12-09 12:49:59 Max. : 38970.00 ## ## CustomerID Country ## Min. :12347 Length:325145 ## 1st Qu.:13959 Class :character ## Median :15150 Mode :character ## Mean :15289 ## 3rd Qu.:16793 ## Max. :18287 ## NA\u0026#39;s :80991\rIf you agree with me that summary sucks on a data.frame object I am glad to show skimr, also if you don’t like summary behaviour on model outputs broom is there to save you, I will talk more about when I make an scikit-learn and caret + tidymodels post.\n\r3.3.5 Subsetting Data with select or base R\rsales[1:4,]\r## # A tibble: 4 x 8\r## InvoiceNo StockCode Description Quantity InvoiceDate UnitPrice\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dttm\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 536365 22752 SET 7 BABU~ 2 2010-12-01 08:26:02 7.65\r## 2 536365 71053 WHITE META~ 6 2010-12-01 08:26:02 3.39\r## 3 536365 84029G KNITTED UN~ 6 2010-12-01 08:26:02 3.39\r## 4 536365 85123A WHITE HANG~ 6 2010-12-01 08:26:02 2.55\r## # ... with 2 more variables: CustomerID \u0026lt;dbl\u0026gt;, Country \u0026lt;chr\u0026gt;\rsales$CustomerID %\u0026gt;% head()\r## [1] 17850 17850 17850 17850 17850 13047\rsales[[\u0026quot;CustomerID\u0026quot;]] %\u0026gt;% head()\r## [1] 17850 17850 17850 17850 17850 13047\rsales[,3] %\u0026gt;% head()\r## # A tibble: 6 x 1\r## Description ## \u0026lt;chr\u0026gt; ## 1 SET 7 BABUSHKA NESTING BOXES ## 2 WHITE METAL LANTERN ## 3 KNITTED UNION FLAG HOT WATER BOTTLE\r## 4 WHITE HANGING HEART T-LIGHT HOLDER ## 5 HAND WARMER UNION JACK ## 6 HOME BUILDING BLOCK WORD\rsales[1:5,3]\r## # A tibble: 5 x 1\r## Description ## \u0026lt;chr\u0026gt; ## 1 SET 7 BABUSHKA NESTING BOXES ## 2 WHITE METAL LANTERN ## 3 KNITTED UNION FLAG HOT WATER BOTTLE\r## 4 WHITE HANGING HEART T-LIGHT HOLDER ## 5 HAND WARMER UNION JACK\rsales$Revenue2 \u0026lt;- sales$Quantity * sales$UnitPrice\rsales[[\u0026quot;Revenue3\u0026quot;]] \u0026lt;- sales[[\u0026quot;Quantity\u0026quot;]] * sales[[\u0026quot;UnitPrice\u0026quot;]]\r# () show created objects # Strange behavior right here 6 rowns on head()\r(sales \u0026lt;- sales %\u0026gt;% mutate(Revenue = Quantity * UnitPrice)) %\u0026gt;% head()\r## # A tibble: 6 x 11\r## InvoiceNo StockCode Description Quantity InvoiceDate UnitPrice\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dttm\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 536365 22752 SET 7 BABU~ 2 2010-12-01 08:26:02 7.65\r## 2 536365 71053 WHITE META~ 6 2010-12-01 08:26:02 3.39\r## 3 536365 84029G KNITTED UN~ 6 2010-12-01 08:26:02 3.39\r## 4 536365 85123A WHITE HANG~ 6 2010-12-01 08:26:02 2.55\r## 5 536366 22633 HAND WARME~ 6 2010-12-01 08:28:02 1.85\r## 6 536367 21754 HOME BUILD~ 3 2010-12-01 08:33:59 5.95\r## # ... with 5 more variables: CustomerID \u0026lt;dbl\u0026gt;, Country \u0026lt;chr\u0026gt;,\r## # Revenue2 \u0026lt;dbl\u0026gt;, Revenue3 \u0026lt;dbl\u0026gt;, Revenue \u0026lt;dbl\u0026gt;\rsum(sales$Revenue == sales$Revenue2)/nrow(sales)\r## [1] 1\rsum(sales$Revenue == sales$Revenue3)/nrow(sales)\r## [1] 1\rsum(sales$Revenue2 == sales$Revenue3)/nrow(sales)\r## [1] 1\r# If there were any differences between our columns the sum would return \u0026lt;1 \r\r3.3.6 Creating a new smaller data frame using transmute and base\rraw_sales \u0026lt;- sales %\u0026gt;% select(Quantity, UnitPrice, Revenue)\rraw_sales %\u0026gt;% head()\r## # A tibble: 6 x 3\r## Quantity UnitPrice Revenue\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 2 7.65 15.3\r## 2 6 3.39 20.3\r## 3 6 3.39 20.3\r## 4 6 2.55 15.3\r## 5 6 1.85 11.1\r## 6 3 5.95 17.8\rraw_sales %\u0026gt;% glimpse()\r## Observations: 325,145\r## Variables: 3\r## $ Quantity \u0026lt;dbl\u0026gt; 2, 6, 6, 6, 6, 3, 3, 4, 6, 6, 6, 8, 4, 3, 3, 48, 24,...\r## $ UnitPrice \u0026lt;dbl\u0026gt; 7.65, 3.39, 3.39, 2.55, 1.85, 5.95, 5.95, 7.95, 1.65...\r## $ Revenue \u0026lt;dbl\u0026gt; 15.30, 20.34, 20.34, 15.30, 11.10, 17.85, 17.85, 31....\rraw_sales %\u0026gt;% skimr::skim()\r## Skim summary statistics\r## n obs: 325145 ## n variables: 3 ## ## -- Variable type:numeric --------------------------------------------------------------------\r## variable missing complete n mean sd p0 p25 p50 p75\r## Quantity 0 325145 325145 9.27 154.39 -80995 1 3 10 ## Revenue 0 325145 325145 17.43 331.85 -168469.6 3.4 9.48 17.4 ## UnitPrice 0 325145 325145 4.85 116.83 -11062.06 1.25 2.08 4.13\r## p100 hist\r## 12540 \u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2587\u0026gt;\u0026lt;U+2581\u0026gt;\r## 38970 \u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2587\u0026gt;\u0026lt;U+2581\u0026gt;\r## 38970 \u0026lt;U+2581\u0026gt;\u0026lt;U+2587\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\r\r3.3.7 Ploting with ggplot\rsales %\u0026gt;% ggplot() +\raes(x = InvoiceDate, y = Revenue) +\rgeom_line()\r\r3.3.8 Filtering and replace data\rHere I really couldn`t figure out an easy way to filter using this\rcancel tricky that works in python.\ncancels = sales$Revenue \u0026lt; 0\rcancels %\u0026gt;% nrow()\r## NULL\rinvert_func \u0026lt;- function(cancel){\rifelse(cancel == 1,\r0,\r1)\r}\rsales2 = sales[invert_func(cancels),]\rsales2 %\u0026gt;% dim()\r## [1] 319557 11\rI really prefer the tidy way also.\nsales \u0026lt;- sales %\u0026gt;% filter(Revenue \u0026gt; 0)\r\r3.3.9 Groupby example in tidyverse\rI prefer the tidy way here as well.\nCountryGroups \u0026lt;- sales %\u0026gt;% group_by(Country) %\u0026gt;% summarise(sum_revenue = sum(Revenue),\rnumber_cases = n()) %\u0026gt;% arrange(-sum_revenue)\rCountryGroups\r## # A tibble: 38 x 3\r## Country sum_revenue number_cases\r## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt;\r## 1 United Kingdom 5311080. 291129\r## 2 EIRE 176305. 4788\r## 3 Netherlands 165583. 1391\r## 4 Germany 138778. 5465\r## 5 France 127194. 5025\r## 6 Australia 79198. 726\r## 7 Spain 36117. 1420\r## 8 Switzerland 34315. 1169\r## 9 Belgium 24015. 1191\r## 10 Norway 23182. 658\r## # ... with 28 more rows\rskimr::skim(sales)\r## Skim summary statistics\r## n obs: 318036 ## n variables: 11 ## ## -- Variable type:character ------------------------------------------------------------------\r## variable missing complete n min max empty n_unique\r## Country 0 318036 318036 3 20 0 38\r## Description 0 318036 318036 6 35 0 3926\r## InvoiceNo 0 318036 318036 6 7 0 19107\r## StockCode 0 318036 318036 1 12 0 3835\r## ## -- Variable type:numeric --------------------------------------------------------------------\r## variable missing complete n mean sd p0 p25\r## CustomerID 79261 238775 318036 15295.34 1713.1 12347 13969 ## Quantity 0 318036 318036 10.25 38.3 1 1 ## Revenue 0 318036 318036 19.78 104.17 0.001 3.75\r## Revenue2 0 318036 318036 19.78 104.17 0.001 3.75\r## Revenue3 0 318036 318036 19.78 104.17 0.001 3.75\r## UnitPrice 0 318036 318036 3.96 42.53 0.001 1.25\r## p50 p75 p100 hist\r## 15157 16800 18287 \u0026lt;U+2587\u0026gt;\u0026lt;U+2586\u0026gt;\u0026lt;U+2587\u0026gt;\u0026lt;U+2587\u0026gt;\u0026lt;U+2586\u0026gt;\u0026lt;U+2586\u0026gt;\u0026lt;U+2586\u0026gt;\u0026lt;U+2587\u0026gt;\r## 3 10 4800 \u0026lt;U+2587\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\r## 9.9 17.7 38970 \u0026lt;U+2587\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\r## 9.9 17.7 38970 \u0026lt;U+2587\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\r## 9.9 17.7 38970 \u0026lt;U+2587\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\r## 2.08 4.13 13541.33 \u0026lt;U+2587\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\u0026lt;U+2581\u0026gt;\r## ## -- Variable type:POSIXct --------------------------------------------------------------------\r## variable missing complete n min max median\r## InvoiceDate 0 318036 318036 2010-12-01 2011-12-09 2011-07-20\r## n_unique\r## 17750\r\r3.3.10 Ploting an histogram using ggplot2\rsales %\u0026gt;%\rfilter(CustomerID == 17850) %\u0026gt;% ggplot() +\raes(Revenue) +\rgeom_histogram(bins = 20)\rAnother example.\nsales %\u0026gt;%\rfilter(StockCode == 71053) %\u0026gt;% ggplot() +\raes(Revenue) +\rgeom_histogram(bins = 20)\r\r3.3.11 Handling Missing values in R\rOk I got hand this one to python.\nsales2$CustomerID %\u0026gt;% table(useNA = \u0026#39;always\u0026#39;) %\u0026gt;%\rsort(decreasing = TRUE) %\u0026gt;%\rhead(3)\r## .\r## 17850 \u0026lt;NA\u0026gt; ## 319557 0\rThis is just not simple enough luckly we can create functions for our afflictions, plus this is replacement as an side effect which sucks.\n#sales[sales[[\u0026quot;CustomerID\u0026quot;]] %\u0026gt;% is.na(),\u0026quot;CustomerID\u0026quot;] \u0026lt;- 0\rThis is an way better tidy way.\n# sales %\u0026gt;% mutate_if(is.numeric, funs(replace(., is.na(.), 0)))\rsales2 \u0026lt;- sales %\u0026gt;% mutate_at(vars(CustomerID),\rlist(\r~replace(.,\ris.na(.), # function that check condition (na)\r0) # value to replace could be mean(.,na.rm = T)\r)\r)\rUsing an stronger method like mice even with an amazing multicore package takes too long for an blogpost, plus I really don’t think there should be an model for CustomerID here is some workflow if you need to split your data.\nnon_character_sales \u0026lt;- sales %\u0026gt;%\rselect_if(function(col)\ris.numeric(col) |\ris.factor(col))\r# or my favorite\rselect_cases \u0026lt;- function(col) {\ris.numeric(col) |\ris.factor(col)\r}\rnon_character_sales \u0026lt;- sales %\u0026gt;% select_if(select_cases)\rnon_character_sales %\u0026gt;% head()\r## # A tibble: 6 x 6\r## Quantity UnitPrice CustomerID Revenue2 Revenue3 Revenue\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 2 7.65 17850 15.3 15.3 15.3\r## 2 6 3.39 17850 20.3 20.3 20.3\r## 3 6 3.39 17850 20.3 20.3 20.3\r## 4 6 2.55 17850 15.3 15.3 15.3\r## 5 6 1.85 17850 11.1 11.1 11.1\r## 6 3 5.95 13047 17.8 17.8 17.8\rcharacter_sales \u0026lt;- sales %\u0026gt;% select_if(negate(is.numeric))\rcharacter_sales %\u0026gt;% head()\r## # A tibble: 6 x 5\r## InvoiceNo StockCode Description InvoiceDate Country ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dttm\u0026gt; \u0026lt;chr\u0026gt; ## 1 536365 22752 SET 7 BABUSHKA NESTIN~ 2010-12-01 08:26:02 United Ki~\r## 2 536365 71053 WHITE METAL LANTERN 2010-12-01 08:26:02 United Ki~\r## 3 536365 84029G KNITTED UNION FLAG HO~ 2010-12-01 08:26:02 United Ki~\r## 4 536365 85123A WHITE HANGING HEART T~ 2010-12-01 08:26:02 United Ki~\r## 5 536366 22633 HAND WARMER UNION JACK 2010-12-01 08:28:02 United Ki~\r## 6 536367 21754 HOME BUILDING BLOCK W~ 2010-12-01 08:33:59 United Ki~\rsales3 \u0026lt;- cbind(character_sales,non_character_sales)\r# if you need the same order\rsales3 \u0026lt;- sales3 %\u0026gt;% select(names(sales)) \r\r3.3.12 Replacing names with an case when aproach\rDon’t mix and match numbers and characters else this will cause an error.\nreplace_function \u0026lt;- function(country) {\rcase_when(\rcountry == \u0026#39;United Kingdom\u0026#39; ~ \u0026quot;1\u0026quot;,\rcountry == \u0026#39;Netherlands\u0026#39; ~ \u0026quot;2\u0026quot;,\rcountry == \u0026#39;Germany\u0026#39; ~ \u0026quot;3\u0026quot;,\rcountry == \u0026#39;France\u0026#39; ~ \u0026quot;4\u0026quot;,\rcountry == \u0026#39;USA\u0026#39; ~ \u0026quot;5\u0026quot;,\rTRUE ~ country\r)\r}\rsales3 \u0026lt;- sales3 %\u0026gt;% mutate(new = replace_function(Country))\rsales3 %\u0026gt;% head()\r## InvoiceNo StockCode Description Quantity\r## 1 536365 22752 SET 7 BABUSHKA NESTING BOXES 2\r## 2 536365 71053 WHITE METAL LANTERN 6\r## 3 536365 84029G KNITTED UNION FLAG HOT WATER BOTTLE 6\r## 4 536365 85123A WHITE HANGING HEART T-LIGHT HOLDER 6\r## 5 536366 22633 HAND WARMER UNION JACK 6\r## 6 536367 21754 HOME BUILDING BLOCK WORD 3\r## InvoiceDate UnitPrice CustomerID Country Revenue2\r## 1 2010-12-01 08:26:02 7.65 17850 United Kingdom 15.30\r## 2 2010-12-01 08:26:02 3.39 17850 United Kingdom 20.34\r## 3 2010-12-01 08:26:02 3.39 17850 United Kingdom 20.34\r## 4 2010-12-01 08:26:02 2.55 17850 United Kingdom 15.30\r## 5 2010-12-01 08:28:02 1.85 17850 United Kingdom 11.10\r## 6 2010-12-01 08:33:59 5.95 13047 United Kingdom 17.85\r## Revenue3 Revenue new\r## 1 15.30 15.30 1\r## 2 20.34 20.34 1\r## 3 20.34 20.34 1\r## 4 15.30 15.30 1\r## 5 11.10 11.10 1\r## 6 17.85 17.85 1\rTwo ways of solving our case_count deficiency.\nvalue_counts \u0026lt;- function(column, useNA = \u0026#39;always\u0026#39;, decreasing = TRUE) {\rcolumn %\u0026gt;% table(useNA = useNA) %\u0026gt;%\rsort(decreasing = decreasing)\r}\rsales3[[\u0026quot;new\u0026quot;]] %\u0026gt;% value_counts() %\u0026gt;% head(7)\r## .\r## 1 3 4 EIRE Spain 2 Belgium ## 291129 5465 5025 4788 1420 1391 1191\r\r\r3.4 Passing Objects to Python\rSimple example.\nsales2 = r.sales2\rtype(sales2)\r## \u0026lt;class \u0026#39;pandas.core.frame.DataFrame\u0026#39;\u0026gt;\rWe can solve our value_counts problem by simply stealing from python then returning the results to r.\nsales3_solution = \\\rr.\\\rsales3.\\\rnew.\\\rvalue_counts().\\\rnlargest(7)\rIf we want to continue working in r after the steal.\nsales3_solution = py$sales3_solution\rsales3_solution\r## 1 3 4 EIRE Spain 2 Belgium ## 291129 5465 5025 4788 1420 1391 1191\r\r\r","date":1553299200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1553299200,"objectID":"b3c09b33c2a17dcddef3078452d607e2","permalink":"/2019/03/23/exploratory-data-analysis-basic-pandas-and-dplyr/","publishdate":"2019-03-23T00:00:00Z","relpermalink":"/2019/03/23/exploratory-data-analysis-basic-pandas-and-dplyr/","section":"post","summary":"This is an basic example of how you can use either R or Python to acomplish the same goals, I really enjoy using the tidyverse but as you will see sometimes Python is just the more intuitive option. If you find yourself confused on whether a code chunk is an R or Python code please ask me or check my github page for this project. \r1 Getting Started, we will use multiple functions from both languages\r1.","tags":["R Markdown","reticulate","pandas","dplyr","tidyverse"],"title":"exploratory data analysis: basic pandas and dplyr","type":"post"},{"authors":["Bruno Carlin"],"categories":[],"content":" from IPython.core.display import Image Image('https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png')  print(\u0026quot;Welcome to Academic!\u0026quot;)  Welcome to Academic!  Install Python and Jupyter Install Anaconda which includes Python 3 and Jupyter notebook.\nOtherwise, for advanced users, install Jupyter notebook with pip3 install jupyter.\nCreate a new blog post as usual Run the following commands in your Terminal, substituting \u0026lt;MY_WEBSITE_FOLDER\u0026gt; and my-post with the file path to your Academic website folder and a name for your blog post (without spaces), respectively:\ncd \u0026lt;MY_WEBSITE_FOLDER\u0026gt; hugo new --kind post post/my-post cd \u0026lt;MY_WEBSITE_FOLDER\u0026gt;/content/post/my-post/  Create or upload a Jupyter notebook Run the following command to start Jupyter within your new blog post folder. Then create a new Jupyter notebook (New \u0026gt; Python Notebook) or upload a notebook.\njupyter notebook  Convert notebook to Markdown jupyter nbconvert Untitled.ipynb --to markdown --NbConvertApp.output_files_dir=. # Copy the contents of Untitled.md and append it to index.md: cat Untitled.md | tee -a index.md # Remove the temporary file: rm Untitled.md  Edit your post metadata Open index.md in your text editor and edit the title etc. in the front matter according to your preference.\nTo set a featured image, place an image named featured into your post\u0026rsquo;s folder.\nFor other tips, such as using math, see the guide on writing content with Academic.\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"6e929dc84ed3ef80467b02e64cd2ed64","permalink":"/2019/02/05/display-jupyter-notebooks-with-academic/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/2019/02/05/display-jupyter-notebooks-with-academic/","section":"post","summary":"Learn how to blog in Academic using Jupyter notebooks","tags":[],"title":"Display Jupyter Notebooks with Academic","type":"post"},{"authors":null,"categories":null,"content":" In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 \u0026hellip;\nTip 2 \u0026hellip;\n","date":1536462000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1536462000,"objectID":"6a451186c775f5f0adb3a0416d0cb711","permalink":"/tutorial/example/","publishdate":"2018-09-09T00:00:00-03:00","relpermalink":"/tutorial/example/","section":"tutorial","summary":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 \u0026hellip;\nTip 2 \u0026hellip;","tags":null,"title":"Example Page","type":"docs"},{"authors":null,"categories":null,"content":"","date":1461726000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461726000,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"/project/external-project/","publishdate":"2016-04-27T00:00:00-03:00","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["Demo"],"title":"External Project","type":"project"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461726000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461726000,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"/project/internal-project/","publishdate":"2016-04-27T00:00:00-03:00","relpermalink":"/project/internal-project/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Internal Project","type":"project"},{"authors":["Bruno Carlin"],"categories":null,"content":" Academic makes it easy to create a beautiful website for free using Markdown. Customize anything on your site with widgets, themes, and language packs.\nFollow our easy step by step guide to learn how to build your own free website with Academic. Check out the personal demo or the business demo of what you\u0026rsquo;ll get in less than 10 minutes.\n View the documentation Ask a question Request a feature or report a bug Updating? View the Update Guide and Release Notes Support development of Academic:  Donate a coffee Become a backer on Patreon Decorate your laptop or journal with an Academic sticker Wear the T-shirt   \nKey features:\n Easily manage various content including homepage, blog posts, publications, talks, and projects Extensible via color themes and widgets/plugins Write in Markdown for easy formatting and code highlighting, with LaTeX for mathematical expressions Social/academic network linking, Google Analytics, and Disqus comments Responsive and mobile friendly Simple and refreshing one page design Multilingual and easy to customize  Color Themes Academic is available in different color themes and font themes.\n         Ecosystem  Academic Admin: An admin tool to import publications from BibTeX or import assets for an offline site Academic Scripts: Scripts to help migrate content to new versions of Academic  Install You can choose from one of the following four methods to install:\n one-click install using your web browser (recommended) install on your computer using Git with the Command Prompt/Terminal app install on your computer by downloading the ZIP files install on your computer with RStudio  Quick install using your web browser  Install Academic with Netlify  Netlify will provide you with a customizable URL to access your new site  On GitHub, go to your newly created academic-kickstart repository and edit config.toml to personalize your site. Shortly after saving the file, your site will automatically update Read the Quick Start Guide to learn how to add Markdown content. For inspiration, refer to the Markdown content which powers the Demo  Install with Git Prerequisites:\n Download and install Git Download and install Hugo   Fork the Academic Kickstart repository and clone your fork with Git:\ngit clone https://github.com/sourcethemes/academic-kickstart.git My_Website  Note that if you forked Academic Kickstart, the above command should be edited to clone your fork, i.e. replace sourcethemes with your GitHub username.\n Initialize the theme:\ncd My_Website git submodule update --init --recursive   Install with ZIP  Download and extract Academic Kickstart Download and extract the Academic theme to the themes/academic/ folder from the above step  Install with RStudio View the guide to installing Academic with RStudio\nQuick start  If you installed on your computer, view your new website by running the following command:\nhugo server  Now visit localhost:1313 and your new Academic powered website will appear. Otherwise, if using Netlify, they will provide you with your URL.\n Read the Quick Start Guide to learn how to add Markdown content, customize your site, and deploy it. For inspiration, refer to the Markdown content which powers the Demo\n Build your site by running the hugo command. Then host it for free using Github Pages or Netlify (refer to the first installation method). Alternatively, copy the generated public/ directory (by FTP, Rsync, etc.) to your production web server (such as a university\u0026rsquo;s hosting service).\n  Updating Feel free to star the project on Github to help keep track of updates and check out the release notes prior to updating your site.\nBefore updating the framework, it is recommended to make a backup of your entire website directory (or at least your themes/academic directory) and record your current version number.\nBy default, Academic is installed as a Git submodule which can be updated by running the following command:\ngit submodule update --remote --merge  Check out the update guide for full instructions and alternative methods.\nFeedback \u0026amp; Contributing Please use the issue tracker to let me know about any bugs or feature requests, or alternatively make a pull request.\nFor support, head over to the Hugo discussion forum.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1461121200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1515808800,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"/2016/04/20/academic-the-website-designer-for-hugo/","publishdate":"2016-04-20T00:00:00-03:00","relpermalink":"/2016/04/20/academic-the-website-designer-for-hugo/","section":"post","summary":"Create a beautifully simple website or blog in under 10 minutes.","tags":["Academic"],"title":"Academic: the website designer for Hugo","type":"post"},{"authors":["GA Cushen"],"categories":null,"content":"More detail can easily be written here using Markdown and $\\rm \\LaTeX$ math code.\n","date":1441076400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441076400,"objectID":"d77fa4a74076ffcd7ca6c21cfc27a4b2","permalink":"/publication/person-re-id/","publishdate":"2015-09-01T00:00:00-03:00","relpermalink":"/publication/person-re-id/","section":"publication","summary":"Person re-identification is a critical security task for recognizing a person across spatially disjoint sensors. Previous work can be computationally intensive and is mainly based on low-level cues extracted from RGB data and implemented on a PC for a fixed sensor network (such as traditional CCTV). We present a practical and efficient framework for mobile devices (such as smart phones and robots) where high-level semantic soft biometrics are extracted from RGB and depth data. By combining these cues, our approach attempts to provide robustness to noise, illumination, and minor variations in clothing. This mobile approach may be particularly useful for the identification of persons in areas ill-served by fixed sensors or for tasks where the sensor position and direction need to dynamically adapt to a target. Results on the BIWI dataset are preliminary but encouraging. Further evaluation and demonstration of the system will be available on our website.","tags":[],"title":"A Person Re-Identification System For Mobile Devices","type":"publication"},{"authors":null,"categories":["R"],"content":"\rR Markdown\rThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nYou can embed an R code chunk like this:\nsummary(cars)\r## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00\rfit \u0026lt;- lm(dist ~ speed, data = cars)\rfit\r## ## Call:\r## lm(formula = dist ~ speed, data = cars)\r## ## Coefficients:\r## (Intercept) speed ## -17.579 3.932\r\rIncluding Plots\rYou can also embed plots. See Figure 1 for example:\npar(mar = c(0, 1, 0, 1))\rpie(\rc(280, 60, 20),\rc(\u0026#39;Sky\u0026#39;, \u0026#39;Sunny side of pyramid\u0026#39;, \u0026#39;Shady side of pyramid\u0026#39;),\rcol = c(\u0026#39;#0292D8\u0026#39;, \u0026#39;#F7EA39\u0026#39;, \u0026#39;#C4B632\u0026#39;),\rinit.angle = -50, border = NA\r)\r\rFigure 1: A fancy pie chart.\r\r\r","date":1437703994,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1437703994,"objectID":"10065deaa3098b0da91b78b48d0efc71","permalink":"/2015/07/23/hello-r-markdown/","publishdate":"2015-07-23T21:13:14-05:00","relpermalink":"/2015/07/23/hello-r-markdown/","section":"post","summary":"R Markdown\rThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nYou can embed an R code chunk like this:\nsummary(cars)\r## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.","tags":["R Markdown","plot","regression"],"title":"Hello R Markdown","type":"post"},{"authors":["GA Cushen","MS Nixon"],"categories":null,"content":"More detail can easily be written here using Markdown and $\\rm \\LaTeX$ math code.\n","date":1372647600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372647600,"objectID":"2b4d919e3cf73dfcd0063c88fe01cb00","permalink":"/publication/clothing-search/","publishdate":"2013-07-01T00:00:00-03:00","relpermalink":"/publication/clothing-search/","section":"publication","summary":"A mobile visual clothing search system is presented whereby a smart phone user can either choose a social networking image or capture a new photo of a person wearing clothing of interest and search for similar clothing in a large cloud-based ecommerce database. The phone's GPS location is used to re-rank results by retail store location, to inform the user of local stores where similar clothing items can be tried on.","tags":[],"title":"Mobile visual clothing search","type":"publication"},{"authors":null,"categories":null,"content":" Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view   Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"c2915ec5da95791851caafdcba9664af","permalink":"/slides/example-slides/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/example-slides/","section":"slides","summary":"Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$","tags":null,"title":"Slides","type":"slides"}]