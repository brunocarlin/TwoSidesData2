<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>r-project on TwoSidesData</title>
    <link>/categories/r-project/</link>
    <description>Recent content in r-project on TwoSidesData</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Jan 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="/categories/r-project/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Google interview question in R - Calendar</title>
      <link>/2020/01/12/google-interview-question-in-r/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/01/12/google-interview-question-in-r/</guid>
      <description>


&lt;p&gt;So to start it all, I learned about this question from the recommended youtube channel &lt;a href=&#34;https://www.youtube.com/channel/UCaO6VoaYJv4kS-TQO_M-N_g&#34;&gt;Clément Mihailescu&lt;/a&gt; in his youtube video &lt;a href=&#34;http://www.youtube.com/watch?v=3Q_oYDQ2whs&#34; title=&#34;Video&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/3Q_oYDQ2whs/0.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this video both Clément and Tim from &lt;a href=&#34;https://www.youtube.com/channel/UC4JX40jDee_tINbkjycV4Sg&#34;&gt;Tech with Tim&lt;/a&gt; work together to solve this question:&lt;/p&gt;
&lt;p&gt;Suppose you have two People that want to Schedule a meeting, how would you schedule it, if each Person has already set up meetings in this day and that each Person has different working hours&lt;/p&gt;
&lt;p&gt;To help us understand it the problem provided us with this example data&lt;/p&gt;
&lt;p&gt;Person 1 has three meetings 9:00 to 10:30, 12:00 to 13:00 and 16:00 to 18:00, this Person works from 9:00 to 20:00&lt;/p&gt;
&lt;p&gt;Person 2 also has three meetings 10:00 to 11:30, 12:30 to 14:30 and 18:00 to 18:30 this Person works from 10:00 to 18:30&lt;/p&gt;
&lt;p&gt;For those just starting out with R and the tidyverse I will explain each part in detail in the collapsible parts of the post.&lt;/p&gt;
&lt;p&gt;So coding this info in R we have&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;person1 &amp;lt;- list(list(&amp;#39;9:00&amp;#39;, &amp;#39;10:30&amp;#39;),
                list(&amp;#39;12:00&amp;#39;, &amp;#39;13:00&amp;#39;),
                list(&amp;#39;16:00&amp;#39;, &amp;#39;18:00&amp;#39;))

allowed_time1 &amp;lt;- list(list(&amp;#39;9:00&amp;#39;,&amp;#39;20:00&amp;#39;))


person2 &amp;lt;- list(list(&amp;#39;10:00&amp;#39;, &amp;#39;11:30&amp;#39;),
                list(&amp;#39;12:30&amp;#39;, &amp;#39;14:30&amp;#39;),
                list(&amp;#39;18:00&amp;#39;, &amp;#39;18:30&amp;#39;))

allowed_time2 &amp;lt;- list(list(&amp;#39;10:00&amp;#39;,&amp;#39;18:30&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you see the video Tim was able to solve it in 45 minutes while having spent a good amount of the time talking back and forth with his interviewer and explaining his reasoning, that was impressive.&lt;/p&gt;
&lt;p&gt;Well I failed to finish this problem in 45 minutes, in fact it took close to 3 hours to stitch together the solution I am about to show, but I think my solution is something that I am proud of and that it follows most of what I love about functional programming.&lt;/p&gt;
&lt;div id=&#34;turning-strings-into-numbers&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Turning strings into numbers&lt;/h1&gt;
&lt;p&gt;I saw that Tim created a function to compare time in his program&lt;/p&gt;
&lt;p&gt;Creating a function that calculates the amount of minutes in a string such as ‘10:30’&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;calculate_minutes &amp;lt;- function(x) {
  x &amp;lt;- str_split(x,pattern = &amp;quot;:&amp;quot;)
  as.integer(x[[1]][[1]]) * 60 + as.integer(x[[1]][[2]])
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;calculate_minutes(&amp;#39;10:30&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 630&lt;/code&gt;&lt;/pre&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;explanation on calculate minutes&lt;/summary&gt;
calculate_minutes splits the string ‘10:30’ into ‘10’ and ‘30’ and then multiples the left hand side by 60, because each hour has 60 minutes in it and then adds the right hand side the minutes to the result 630 = 10 * 60 + 30 minutes.&lt;/p&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;div id=&#34;reframing-the-problem&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Reframing the problem&lt;/h1&gt;
&lt;p&gt;While the first the may seem useless in both r and python since ‘14:30’ &amp;lt; “10:30” will return FALSE/False, this idea made me realize a really cool functional way to solve this problem&lt;/p&gt;
&lt;p&gt;We can reframe the focus on minutes overlapping of each appointment instead of time comparison like Tim used is his solution.&lt;/p&gt;
&lt;p&gt;So based on this new idea, I created a function to convert the the strings we received into ranges of minutes, basically the interval of each appointment.&lt;/p&gt;
&lt;p&gt;We will also need the interval of the full Day&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;full_day &amp;lt;- 1:(24*60) # 24 hours * 60 minutes -&amp;gt; range 1: to result&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is the function that applies Step One and Two&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;calculate_interval &amp;lt;- . %&amp;gt;% 
  map_depth(.depth = 2,calculate_minutes) %&amp;gt;% 
  map(.,~ reduce(.,seq))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;calculate_interval &amp;lt;- . %&amp;gt;% 
  map(calculate_minutes) %&amp;gt;% 
  reduce(seq)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;example_appointment &amp;lt;- list(&amp;#39;10:30&amp;#39;,&amp;#39;10:40&amp;#39;)
example_appointment %&amp;gt;% calculate_interval&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 630 631 632 633 634 635 636 637 638 639 640&lt;/code&gt;&lt;/pre&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;explanation on calculate_interval&lt;/summary&gt;
I use “.” as a shortcut for function(x) {} it is really useful in function pipes like this one&lt;/p&gt;
&lt;p&gt;map is a function that applies another function to all elements of an list and returns ideally the same number of elements like this,&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;example_list &amp;lt;- list(list(&amp;#39;hi&amp;#39;,&amp;#39;johnny&amp;#39;),list(&amp;#39;how&amp;#39;,&amp;#39;are&amp;#39;,&amp;#39;you&amp;#39;))
map(example_list,.f = str_to_upper)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] &amp;quot;HI&amp;quot;     &amp;quot;JOHNNY&amp;quot;
## 
## [[2]]
## [1] &amp;quot;HOW&amp;quot; &amp;quot;ARE&amp;quot; &amp;quot;YOU&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I also use pipes (%&amp;gt;%), the pipes allow us to change the nested nature of function calls into a sequential one
for example&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;example_list %&amp;gt;%
  map(str_to_title)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] &amp;quot;Hi&amp;quot;     &amp;quot;Johnny&amp;quot;
## 
## [[2]]
## [1] &amp;quot;How&amp;quot; &amp;quot;Are&amp;quot; &amp;quot;You&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And finally I use another core function of functional programming reduce, reduce works by applying the same function in a list until the is only one element left for example&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reduce(1:4,sum)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 10&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;We then need to use this function on all of our info&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;person1_interval &amp;lt;- person1 %&amp;gt;%
  map(calculate_interval)

person2_interval &amp;lt;- person2 %&amp;gt;% 
  map(calculate_interval)

allowed_time1_interval &amp;lt;- allowed_time1 %&amp;gt;% 
  map(calculate_interval)

allowed_time2_interval &amp;lt;- allowed_time2 %&amp;gt;% 
  map(calculate_interval)&lt;/code&gt;&lt;/pre&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;example Person1&lt;/summary&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;person1 %&amp;gt;% 
  map(calculate_interval)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
##  [1] 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558
## [20] 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577
## [39] 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596
## [58] 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615
## [77] 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630
## 
## [[2]]
##  [1] 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738
## [20] 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757
## [39] 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776
## [58] 777 778 779 780
## 
## [[3]]
##   [1]  960  961  962  963  964  965  966  967  968  969  970  971  972  973  974
##  [16]  975  976  977  978  979  980  981  982  983  984  985  986  987  988  989
##  [31]  990  991  992  993  994  995  996  997  998  999 1000 1001 1002 1003 1004
##  [46] 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019
##  [61] 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034
##  [76] 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049
##  [91] 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064
## [106] 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079
## [121] 1080&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;div id=&#34;calculating-occupied-and-available-minutes&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Calculating occupied and available minutes&lt;/h1&gt;
&lt;p&gt;This is a simple step we simply need to collapse the lists in the result&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;schedule_1_occupied &amp;lt;- person1_interval &amp;lt;- person1_interval %&amp;gt;% reduce(c)
schedule_1_avalaible &amp;lt;- allowed_time1_interval %&amp;gt;% reduce(c)

schedule_2_occupied &amp;lt;- person2_interval %&amp;gt;% reduce(c)
schedule_2_avalaible &amp;lt;- allowed_time2_interval %&amp;gt;% reduce(c)&lt;/code&gt;&lt;/pre&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;example reduce c&lt;/summary&gt;
Here is an example of how to collapse a simple list&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;list(c(1,3,4),c(2,5)) %&amp;gt;% reduce(c)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 3 4 2 5&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;div id=&#34;filtering-lists&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Filtering lists&lt;/h1&gt;
&lt;p&gt;Now finally to our last core functional language function (filter), in the tidyverse filter was split into two function discard and keep, mostly because the actual filter function is used in the core of the dplyr essential function.&lt;/p&gt;
&lt;p&gt;We can start with the full_day and take away occupied minutes in this manner, and keep valid minutes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;possible_minutes &amp;lt;- full_day %&amp;gt;% 
  discard(~ .x %in% c(schedule_1_occupied,schedule_2_occupied)) %&amp;gt;%
  keep(~ .x %in% schedule_1_avalaible) %&amp;gt;% 
  keep(~ .x %in% schedule_2_avalaible)
possible_minutes&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   [1] 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708
##  [19] 709 710 711 712 713 714 715 716 717 718 719 871 872 873 874 875 876 877
##  [37] 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895
##  [55] 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913
##  [73] 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931
##  [91] 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949
## [109] 950 951 952 953 954 955 956 957 958 959&lt;/code&gt;&lt;/pre&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;explanation filter&lt;/summary&gt;
filter works by receiving an vector or list and return only elements that have passed or failed a test for example&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;discard(1:10,  ~ . &amp;gt; 5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 3 4 5&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;keep(1:10,  ~ . &amp;gt; 5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  6  7  8  9 10&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;Keep in mind that while discarding we can evaluate everything together and the result stays the same, but when keeping it is important in this case to separate the call into two&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;calculating-start-and-end-minutes&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Calculating start and end minutes&lt;/h1&gt;
&lt;p&gt;This function solves the problem that we as human prefer to receive just the start and end minutes instead of the whole duration&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;calculate_break_time &amp;lt;- function(intergers){
  intergers &amp;lt;- sort(intergers)
  end &amp;lt;- time &amp;lt;- which(diff(intergers) != 1)
  begin &amp;lt;- end + 1
  intergers[c(1,end,begin,length(intergers)) %&amp;gt;% sort()]
}&lt;/code&gt;&lt;/pre&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;explanation calculate_break_time&lt;/summary&gt;
This is the function that I am least happy, but basically the two minutes that we know we will need are the smallest minute that will start the first appointment and the last minute which will end the last appointment
The in between minutes are found by looking for jumps between minutes using the diff function&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;diff(c(1,3,4,5,9))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2 1 1 4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If there is more than one minute of difference it is the end of an appointment and one minute later there will be the start of a new appointment&lt;/p&gt;
&lt;/details&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;start_end_minutes &amp;lt;- possible_minutes %&amp;gt;% calculate_break_time()
start_end_minutes&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 691 719 871 959&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;converting-it-minutes-back-into-readable-hours&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Converting it minutes back into readable hours&lt;/h1&gt;
&lt;p&gt;A simple function that undoes our transformation if you need to read &lt;a href=&#34;http://rfunction.com/archives/1648&#34;&gt;%/% explanation&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;turn_back_into_time &amp;lt;- function(x) {
  x_hour &amp;lt;- x %/% 60
  x_minute &amp;lt;- x %% 60
  str_c(x_hour,x_minute,sep = &amp;#39;:&amp;#39;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(readable_time &amp;lt;- start_end_minutes %&amp;gt;% turn_back_into_time)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;11:31&amp;quot; &amp;quot;11:59&amp;quot; &amp;quot;14:31&amp;quot; &amp;quot;15:59&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;pairing-start-and-end-hours&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Pairing Start and End Hours&lt;/h1&gt;
&lt;p&gt;I will over complicate the flagging of Even and odd numbers to show another really cool functional concept of currying, while currying is not encouraged by the tidyverse the partial functions does make it pretty easy to use (same as Python)&lt;/p&gt;
&lt;p&gt;The other cool concept is that you can negate a function, in this case turning the results of is_even into is_odd&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;diviseble_by &amp;lt;- function(number_vector,divisor,quocient) {
  number_vector %% divisor == quocient
}

is_even &amp;lt;- partial(diviseble_by,divisor = 2,quocient = 0)
is_odd &amp;lt;- is_even %&amp;gt;% negate()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;1:10 %&amp;gt;% is_even&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;1:10 %&amp;gt;% is_odd&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We then use these functions to unite our start and end minutes&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pair_wise_combination &amp;lt;- function(character_vector){
  vector_i &amp;lt;- seq_along(character_vector)
  ends &amp;lt;- vector_i %&amp;gt;% is_even
  begins &amp;lt;- vector_i %&amp;gt;% is_odd
  str_c(character_vector[begins],character_vector[ends],sep = &amp;quot; &amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;readable_time %&amp;gt;% pair_wise_combination&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;11:31 11:59&amp;quot; &amp;quot;14:31 15:59&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That is all folks.&lt;/p&gt;
&lt;p&gt;My answer would solve for n individuals just fine&lt;/p&gt;
&lt;p&gt;I failed because it 3 hours to get into this solution, and I would have blankly stared into the interviewer face for a while before admitting that I have no idea the Big O of this answer&lt;/p&gt;
&lt;p&gt;I can answer questions anywhere, please do share it if you have enjoyed it.&lt;/p&gt;
&lt;p&gt;A disclaimer is that while I do understand big O notation and its importance, I am not a Software Engineer nor a Computer Scientist, and as such I have no idea how efficient my solution is, I know it is fast enough for me, but I understand that big O knowledge is a major difference while learning DS, rarely if ever people mention the Big O of our algorithms so I never deeply studied about the subject.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>FizzBuzz in the tidyverse</title>
      <link>/2019/12/22/fizzbuzz-in-the-tidyverse/</link>
      <pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/12/22/fizzbuzz-in-the-tidyverse/</guid>
      <description>


&lt;p&gt;FizzBuzz is and old kids games&lt;/p&gt;
&lt;p&gt;Not that popular where I am from Brazil, Fizz Buzz has a simple set of rules&lt;/p&gt;
&lt;p&gt;You start counting from 1 (obviously) and when a number is a multiple of 3 you say &lt;strong&gt;Fizz&lt;/strong&gt;,&lt;br /&gt;
if the number is a multiple of 5 you say &lt;strong&gt;Buzz&lt;/strong&gt;,&lt;br /&gt;
and if the number is a multiple of both you shout &lt;strong&gt;FizzBuzz&lt;/strong&gt;,
And for every other case you can say the &lt;strong&gt;number itself&lt;/strong&gt;, simple right?&lt;/p&gt;
&lt;p&gt;I watched this really cool video on Tom Scott channel and realized that I have never attempted this problem as a programmer&lt;/p&gt;
&lt;p&gt;This is an blog post full of tricks I will try to point them all out.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/QPZ0pIK_wsc&#34;&gt;Scott’s video&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;naive-fizzbuzz&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Naive FizzBuzz&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.r-bloggers.com/fizzbuzz-in-r-and-python/&#34;&gt;Naive FizzBuzz&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;for (i in 1:15){
  
  if(i%%3 == 0 &amp;amp; i%%5 == 0) {
    print(&amp;#39;FizzBuzz&amp;#39;)
  }
  else if(i%%3 == 0) {
    print(&amp;#39;Fizz&amp;#39;)
  }
  else if (i%%5 == 0){
    print(&amp;#39;Buzz&amp;#39;)
  }
  else {
    print(i)
  }
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
## [1] 2
## [1] &amp;quot;Fizz&amp;quot;
## [1] 4
## [1] &amp;quot;Buzz&amp;quot;
## [1] &amp;quot;Fizz&amp;quot;
## [1] 7
## [1] 8
## [1] &amp;quot;Fizz&amp;quot;
## [1] &amp;quot;Buzz&amp;quot;
## [1] 11
## [1] &amp;quot;Fizz&amp;quot;
## [1] 13
## [1] 14
## [1] &amp;quot;FizzBuzz&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Simple flow control with if, else statements&lt;/li&gt;
&lt;li&gt;Some basic operators ($, ==)&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;extending-the-loop-approach&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Extending the loop approach&lt;/h1&gt;
&lt;p&gt;Using Scott’s approach we can improve a bit on the logic&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;for (i in 1:15){
  current_out &amp;lt;- &amp;#39;&amp;#39;
  if(i%%3 == 0) {
    current_out &amp;lt;- paste0(current_out,&amp;#39;Fizz&amp;#39;)
  }
  if (i%%5 == 0){
    current_out &amp;lt;- paste0(current_out,&amp;#39;Buzz&amp;#39;)
  }
  if (current_out == &amp;#39;&amp;#39;){
    print(i)
  }
  else print(current_out)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
## [1] 2
## [1] &amp;quot;Fizz&amp;quot;
## [1] 4
## [1] &amp;quot;Buzz&amp;quot;
## [1] &amp;quot;Fizz&amp;quot;
## [1] 7
## [1] 8
## [1] &amp;quot;Fizz&amp;quot;
## [1] &amp;quot;Buzz&amp;quot;
## [1] 11
## [1] &amp;quot;Fizz&amp;quot;
## [1] 13
## [1] 14
## [1] &amp;quot;FizzBuzz&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While it is possible to improve open this loop, I think it already is close to the limits of what I would call a very simple example&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;functional-approach&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Functional approach&lt;/h1&gt;
&lt;p&gt;Thanks &lt;a href=&#34;https://www.r-bloggers.com/fizzbuzz-in-r/&#34;&gt;Functional FizzBuzz&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;divisor &amp;lt;-
  function(number, string) {
    function(d) {
      if (d %% number == 0) string else &amp;quot;&amp;quot;
    }
  }

mod3er &amp;lt;- divisor(3, &amp;quot;Fizz&amp;quot;)
mod5er &amp;lt;- divisor(5, &amp;quot;Buzz&amp;quot;)

fizzbuzz &amp;lt;- 
  function(i) {
    res &amp;lt;- paste0(mod3er(i), mod5er(i))
    ifelse(res == &amp;quot;&amp;quot;, i, res)
  }

sapply(1:15, fizzbuzz)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;1&amp;quot;        &amp;quot;2&amp;quot;        &amp;quot;Fizz&amp;quot;     &amp;quot;4&amp;quot;        &amp;quot;Buzz&amp;quot;     &amp;quot;Fizz&amp;quot;    
##  [7] &amp;quot;7&amp;quot;        &amp;quot;8&amp;quot;        &amp;quot;Fizz&amp;quot;     &amp;quot;Buzz&amp;quot;     &amp;quot;11&amp;quot;       &amp;quot;Fizz&amp;quot;    
## [13] &amp;quot;13&amp;quot;       &amp;quot;14&amp;quot;       &amp;quot;FizzBuzz&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So enumerating the new concepts here:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Functions that create functions (mod3er,mod5er)&lt;/li&gt;
&lt;li&gt;Functions that create functions that create functions (divisor)&lt;/li&gt;
&lt;li&gt;Applying functions (sapply)&lt;/li&gt;
&lt;li&gt;Functional if else (I prefer it)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All of which seen pretty complicated at first but will pay off big time latter.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;my-approach-tidyverse&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;My approach (tidyverse)&lt;/h1&gt;
&lt;div id=&#34;the-basics&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Basics&lt;/h2&gt;
&lt;p&gt;Loading the tidyverse&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Attaching packages ---------------------------------------------------------------------------------------------------------------------------------------------- tidyverse 1.3.0 --&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;U+2713&amp;gt; ggplot2 3.2.1     &amp;lt;U+2713&amp;gt; purrr   0.3.3
## &amp;lt;U+2713&amp;gt; tibble  2.1.3     &amp;lt;U+2713&amp;gt; dplyr   0.8.3
## &amp;lt;U+2713&amp;gt; tidyr   1.0.0     &amp;lt;U+2713&amp;gt; stringr 1.4.0
## &amp;lt;U+2713&amp;gt; readr   1.3.1     &amp;lt;U+2713&amp;gt; forcats 0.4.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Conflicts ------------------------------------------------------------------------------------------------------------------------------------------------- tidyverse_conflicts() --
## x dplyr::filter() masks stats::filter()
## x dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;divisor &amp;lt;- function(number, string) {
    function(input) {
      if_else(condition = input %% number == 0,
              true = string,
              false = &amp;quot;&amp;quot;)
    }
}

mod3 &amp;lt;- divisor(3, &amp;quot;Fizz&amp;quot;)
mod5 &amp;lt;- divisor(5, &amp;quot;Buzz&amp;quot;)

list_functions &amp;lt;- list(mod3,mod5)

mapper_list &amp;lt;- function(i,list_functions) map(list_functions, exec,i)

map(1:15,mapper_list,list_functions) %&amp;gt;% 
  map(reduce,str_c)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] &amp;quot;&amp;quot;
## 
## [[2]]
## [1] &amp;quot;&amp;quot;
## 
## [[3]]
## [1] &amp;quot;Fizz&amp;quot;
## 
## [[4]]
## [1] &amp;quot;&amp;quot;
## 
## [[5]]
## [1] &amp;quot;Buzz&amp;quot;
## 
## [[6]]
## [1] &amp;quot;Fizz&amp;quot;
## 
## [[7]]
## [1] &amp;quot;&amp;quot;
## 
## [[8]]
## [1] &amp;quot;&amp;quot;
## 
## [[9]]
## [1] &amp;quot;Fizz&amp;quot;
## 
## [[10]]
## [1] &amp;quot;Buzz&amp;quot;
## 
## [[11]]
## [1] &amp;quot;&amp;quot;
## 
## [[12]]
## [1] &amp;quot;Fizz&amp;quot;
## 
## [[13]]
## [1] &amp;quot;&amp;quot;
## 
## [[14]]
## [1] &amp;quot;&amp;quot;
## 
## [[15]]
## [1] &amp;quot;FizzBuzz&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We learned two new tricks:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Executing a list of functions using exec&lt;/li&gt;
&lt;li&gt;reducing an list&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;making-just-one-call&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Making just one call&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fancy &amp;lt;- function(i,...) {
  list_functions &amp;lt;- list(...)
  mapper_list &amp;lt;- function(i,list_functions) map(list_functions, exec,i)
  map(i,mapper_list,list_functions) %&amp;gt;%
  map(reduce,str_c)
}

fancy(1:15,mod3,mod5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] &amp;quot;&amp;quot;
## 
## [[2]]
## [1] &amp;quot;&amp;quot;
## 
## [[3]]
## [1] &amp;quot;Fizz&amp;quot;
## 
## [[4]]
## [1] &amp;quot;&amp;quot;
## 
## [[5]]
## [1] &amp;quot;Buzz&amp;quot;
## 
## [[6]]
## [1] &amp;quot;Fizz&amp;quot;
## 
## [[7]]
## [1] &amp;quot;&amp;quot;
## 
## [[8]]
## [1] &amp;quot;&amp;quot;
## 
## [[9]]
## [1] &amp;quot;Fizz&amp;quot;
## 
## [[10]]
## [1] &amp;quot;Buzz&amp;quot;
## 
## [[11]]
## [1] &amp;quot;&amp;quot;
## 
## [[12]]
## [1] &amp;quot;Fizz&amp;quot;
## 
## [[13]]
## [1] &amp;quot;&amp;quot;
## 
## [[14]]
## [1] &amp;quot;&amp;quot;
## 
## [[15]]
## [1] &amp;quot;FizzBuzz&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One new trick using ellipsis&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;or-preparing-for-an-api&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Or preparing for an api&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;api_less_fancy &amp;lt;- function(i,list_functions) {
  mapper_list &amp;lt;- function(i,list_functions) map(list_functions, exec,i)
  map(i,mapper_list,list_functions) %&amp;gt;%
  map(reduce,str_c)
}

api_less_fancy(1:15,list(mod3,mod5))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] &amp;quot;&amp;quot;
## 
## [[2]]
## [1] &amp;quot;&amp;quot;
## 
## [[3]]
## [1] &amp;quot;Fizz&amp;quot;
## 
## [[4]]
## [1] &amp;quot;&amp;quot;
## 
## [[5]]
## [1] &amp;quot;Buzz&amp;quot;
## 
## [[6]]
## [1] &amp;quot;Fizz&amp;quot;
## 
## [[7]]
## [1] &amp;quot;&amp;quot;
## 
## [[8]]
## [1] &amp;quot;&amp;quot;
## 
## [[9]]
## [1] &amp;quot;Fizz&amp;quot;
## 
## [[10]]
## [1] &amp;quot;Buzz&amp;quot;
## 
## [[11]]
## [1] &amp;quot;&amp;quot;
## 
## [[12]]
## [1] &amp;quot;Fizz&amp;quot;
## 
## [[13]]
## [1] &amp;quot;&amp;quot;
## 
## [[14]]
## [1] &amp;quot;&amp;quot;
## 
## [[15]]
## [1] &amp;quot;FizzBuzz&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;extending-fizzbuzz&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Extending FizzBuzz&lt;/h1&gt;
&lt;p&gt;Let’s see how easy it is too make the game more difficult:&lt;/p&gt;
&lt;div id=&#34;changing-names&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Changing names&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod3n &amp;lt;- divisor(3, &amp;quot;Buzz&amp;quot;)
mod5n &amp;lt;- divisor(5,&amp;#39;Fizz&amp;#39;)
fancy(1:15,mod3n,mod5n)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] &amp;quot;&amp;quot;
## 
## [[2]]
## [1] &amp;quot;&amp;quot;
## 
## [[3]]
## [1] &amp;quot;Buzz&amp;quot;
## 
## [[4]]
## [1] &amp;quot;&amp;quot;
## 
## [[5]]
## [1] &amp;quot;Fizz&amp;quot;
## 
## [[6]]
## [1] &amp;quot;Buzz&amp;quot;
## 
## [[7]]
## [1] &amp;quot;&amp;quot;
## 
## [[8]]
## [1] &amp;quot;&amp;quot;
## 
## [[9]]
## [1] &amp;quot;Buzz&amp;quot;
## 
## [[10]]
## [1] &amp;quot;Fizz&amp;quot;
## 
## [[11]]
## [1] &amp;quot;&amp;quot;
## 
## [[12]]
## [1] &amp;quot;Buzz&amp;quot;
## 
## [[13]]
## [1] &amp;quot;&amp;quot;
## 
## [[14]]
## [1] &amp;quot;&amp;quot;
## 
## [[15]]
## [1] &amp;quot;BuzzFizz&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;adding-divisors&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Adding divisors&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mod2 &amp;lt;- divisor(2, &amp;quot;Deuce&amp;quot;)
fancy(1:30,mod2,mod3,mod5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] &amp;quot;&amp;quot;
## 
## [[2]]
## [1] &amp;quot;Deuce&amp;quot;
## 
## [[3]]
## [1] &amp;quot;Fizz&amp;quot;
## 
## [[4]]
## [1] &amp;quot;Deuce&amp;quot;
## 
## [[5]]
## [1] &amp;quot;Buzz&amp;quot;
## 
## [[6]]
## [1] &amp;quot;DeuceFizz&amp;quot;
## 
## [[7]]
## [1] &amp;quot;&amp;quot;
## 
## [[8]]
## [1] &amp;quot;Deuce&amp;quot;
## 
## [[9]]
## [1] &amp;quot;Fizz&amp;quot;
## 
## [[10]]
## [1] &amp;quot;DeuceBuzz&amp;quot;
## 
## [[11]]
## [1] &amp;quot;&amp;quot;
## 
## [[12]]
## [1] &amp;quot;DeuceFizz&amp;quot;
## 
## [[13]]
## [1] &amp;quot;&amp;quot;
## 
## [[14]]
## [1] &amp;quot;Deuce&amp;quot;
## 
## [[15]]
## [1] &amp;quot;FizzBuzz&amp;quot;
## 
## [[16]]
## [1] &amp;quot;Deuce&amp;quot;
## 
## [[17]]
## [1] &amp;quot;&amp;quot;
## 
## [[18]]
## [1] &amp;quot;DeuceFizz&amp;quot;
## 
## [[19]]
## [1] &amp;quot;&amp;quot;
## 
## [[20]]
## [1] &amp;quot;DeuceBuzz&amp;quot;
## 
## [[21]]
## [1] &amp;quot;Fizz&amp;quot;
## 
## [[22]]
## [1] &amp;quot;Deuce&amp;quot;
## 
## [[23]]
## [1] &amp;quot;&amp;quot;
## 
## [[24]]
## [1] &amp;quot;DeuceFizz&amp;quot;
## 
## [[25]]
## [1] &amp;quot;Buzz&amp;quot;
## 
## [[26]]
## [1] &amp;quot;Deuce&amp;quot;
## 
## [[27]]
## [1] &amp;quot;Fizz&amp;quot;
## 
## [[28]]
## [1] &amp;quot;Deuce&amp;quot;
## 
## [[29]]
## [1] &amp;quot;&amp;quot;
## 
## [[30]]
## [1] &amp;quot;DeuceFizzBuzz&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;adding-new-rules&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Adding new rules&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;less &amp;lt;- function(number, string) {
    function(input) {
      if_else(condition = input &amp;lt; number,
              true = string,
              false = &amp;quot;&amp;quot;)
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;less10 &amp;lt;- less(10,&amp;quot;Small&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fancy(1:15,less10,mod3,mod5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] &amp;quot;Small&amp;quot;
## 
## [[2]]
## [1] &amp;quot;Small&amp;quot;
## 
## [[3]]
## [1] &amp;quot;SmallFizz&amp;quot;
## 
## [[4]]
## [1] &amp;quot;Small&amp;quot;
## 
## [[5]]
## [1] &amp;quot;SmallBuzz&amp;quot;
## 
## [[6]]
## [1] &amp;quot;SmallFizz&amp;quot;
## 
## [[7]]
## [1] &amp;quot;Small&amp;quot;
## 
## [[8]]
## [1] &amp;quot;Small&amp;quot;
## 
## [[9]]
## [1] &amp;quot;SmallFizz&amp;quot;
## 
## [[10]]
## [1] &amp;quot;Buzz&amp;quot;
## 
## [[11]]
## [1] &amp;quot;&amp;quot;
## 
## [[12]]
## [1] &amp;quot;Fizz&amp;quot;
## 
## [[13]]
## [1] &amp;quot;&amp;quot;
## 
## [[14]]
## [1] &amp;quot;&amp;quot;
## 
## [[15]]
## [1] &amp;quot;FizzBuzz&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That is it have a great day.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Classification - KNN</title>
      <link>/2019/08/15/classification-knn/</link>
      <pubDate>Thu, 15 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/08/15/classification-knn/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/datatables-css/datatables-crosstalk.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/datatables-binding/datatables.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/dt-core/css/jquery.dataTables.min.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;link href=&#34;/rmarkdown-libs/dt-core/css/jquery.dataTables.extra.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/dt-core/js/jquery.dataTables.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/crosstalk/css/crosstalk.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/crosstalk/js/crosstalk.min.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Breast Cancer problem.&lt;/p&gt;
&lt;p&gt;This is a problem that I have trid to solve using just the old tidymodels package and got stuck so here is the new implementation using the amazing tune and workflows
packages&lt;/p&gt;
&lt;div id=&#34;setting-up-rmarkdown&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Setting up Rmarkdown&lt;/h1&gt;
&lt;p&gt;root.dir =&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;loading-libraries&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Loading Libraries&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Attaching packages ---------------------------------------------------------------------------------------------------------------------------------------------- tidyverse 1.3.0 --&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;U+2713&amp;gt; ggplot2 3.2.1     &amp;lt;U+2713&amp;gt; purrr   0.3.3
## &amp;lt;U+2713&amp;gt; tibble  2.1.3     &amp;lt;U+2713&amp;gt; dplyr   0.8.3
## &amp;lt;U+2713&amp;gt; tidyr   1.0.0     &amp;lt;U+2713&amp;gt; stringr 1.4.0
## &amp;lt;U+2713&amp;gt; readr   1.3.1     &amp;lt;U+2713&amp;gt; forcats 0.4.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Conflicts ------------------------------------------------------------------------------------------------------------------------------------------------- tidyverse_conflicts() --
## x dplyr::filter() masks stats::filter()
## x dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidymodels)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Registered S3 method overwritten by &amp;#39;xts&amp;#39;:
##   method     from
##   as.zoo.xts zoo&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Attaching packages --------------------------------------------------------------------------------------------------------------------------------------------- tidymodels 0.0.3 --&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;U+2713&amp;gt; broom     0.5.3     &amp;lt;U+2713&amp;gt; recipes   0.1.8
## &amp;lt;U+2713&amp;gt; dials     0.0.4     &amp;lt;U+2713&amp;gt; rsample   0.0.5
## &amp;lt;U+2713&amp;gt; infer     0.5.1     &amp;lt;U+2713&amp;gt; yardstick 0.0.4
## &amp;lt;U+2713&amp;gt; parsnip   0.0.4&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Conflicts ------------------------------------------------------------------------------------------------------------------------------------------------ tidymodels_conflicts() --
## x scales::discard()   masks purrr::discard()
## x dplyr::filter()     masks stats::filter()
## x recipes::fixed()    masks stringr::fixed()
## x dplyr::lag()        masks stats::lag()
## x dials::margin()     masks ggplot2::margin()
## x yardstick::spec()   masks readr::spec()
## x recipes::step()     masks stats::step()
## x recipes::yj_trans() masks scales::yj_trans()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(janitor)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;janitor&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:stats&amp;#39;:
## 
##     chisq.test, fisher.test&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(skimr)
library(DataExplorer)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Loading Libraries: 3.65 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Getting Data&lt;/h1&gt;
&lt;p&gt;Got the dataset with headers on &lt;a href=&#34;https://www.kaggle.com/uciml/breast-cancer-wisconsin-data/version/2&#34;&gt;kaggle link&lt;/a&gt;, there is also a cool explanation about the problem there.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- read_csv(&amp;quot;breast_cancer.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Missing column names filled in: &amp;#39;X33&amp;#39; [33]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   .default = col_double(),
##   diagnosis = col_character(),
##   X33 = col_character()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## See spec(...) for full column specifications.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: 569 parsing failures.
## row col   expected     actual                file
##   1  -- 33 columns 32 columns &amp;#39;breast_cancer.csv&amp;#39;
##   2  -- 33 columns 32 columns &amp;#39;breast_cancer.csv&amp;#39;
##   3  -- 33 columns 32 columns &amp;#39;breast_cancer.csv&amp;#39;
##   4  -- 33 columns 32 columns &amp;#39;breast_cancer.csv&amp;#39;
##   5  -- 33 columns 32 columns &amp;#39;breast_cancer.csv&amp;#39;
## ... ... .......... .......... ...................
## See problems(...) for more details.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Set Chunk: 0.16 sec elapsed&lt;/p&gt;
&lt;p&gt;There is a strange extra column named X33 dealing with that using janitor package&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- df %&amp;gt;% 
  janitor::remove_empty_cols()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: &amp;#39;janitor::remove_empty_cols&amp;#39; is deprecated.
## Use &amp;#39;remove_empty(&amp;quot;cols&amp;quot;)&amp;#39; instead.
## See help(&amp;quot;Deprecated&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cleaning Data: 0.01 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;visualizing-the-data-using-dataexplorer-and-skimr&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Visualizing the data using DataExplorer and Skimr&lt;/h1&gt;
&lt;div id=&#34;skimr-is-a-fast-way-to-get-info-on-your-data-even-though-the-hist-plot-fails-on-my-blog&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Skimr is a fast way to get info on your data even though the hist plot fails on my blog :(&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df %&amp;gt;% 
  skimr::skim()&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;caption&gt;&lt;span id=&#34;tab:Skimr&#34;&gt;Table 1: &lt;/span&gt;Data summary&lt;/caption&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Name&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Piped data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Number of rows&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;569&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Number of columns&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;_______________________&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Column type frequency:&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;character&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;________________________&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Group variables&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Variable type: character&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;skim_variable&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;n_missing&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;complete_rate&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;min&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;max&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;empty&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;n_unique&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;whitespace&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;diagnosis&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Variable type: numeric&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;skim_variable&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;n_missing&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;complete_rate&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;sd&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p0&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p25&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p50&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p75&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p100&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;hist&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;id&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;30371831.43&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;125020585.61&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8670.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;869218.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;906024.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8813129.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;911320502.00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▁▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;radius_mean&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.98&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.70&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15.78&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28.11&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▂▇▃▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;texture_mean&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19.29&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.30&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.71&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.17&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.84&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.80&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39.28&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▃▇▃▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;perimeter_mean&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;91.97&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.30&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;43.79&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;75.17&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;86.24&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;104.10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;188.50&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▃▇▃▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;area_mean&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;654.89&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;351.91&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;143.50&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;420.30&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;551.10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;782.70&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2501.00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▃▂▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;smoothness_mean&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.16&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▇▇▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;compactness_mean&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.06&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.35&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▇▂▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;concavity_mean&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.08&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.06&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.43&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▃▂▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;concave points_mean&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.04&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.20&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▃▂▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;symmetry_mean&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.20&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.30&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▇▅▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;fractal_dimension_mean&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.06&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.06&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.06&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.10&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▆▇▂▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;radius_se&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.41&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.87&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▁▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;texture_se&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.55&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.36&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.83&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.47&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.88&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▅▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;perimeter_se&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.76&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.61&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.29&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.36&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.98&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▁▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;area_se&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40.34&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;45.49&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.80&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17.85&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.53&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;45.19&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;542.20&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▁▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;smoothness_se&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.03&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▃▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;compactness_se&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.14&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▃▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;concavity_se&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.04&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.40&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▁▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;concave points_se&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.05&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▇▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;symmetry_se&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.08&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▃▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;fractal_dimension_se&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.03&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▁▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;radius_worst&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.27&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.83&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.93&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.97&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.79&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;36.04&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▆▇▃▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;texture_worst&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.08&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.41&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;29.72&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.54&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▃▇▆▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;perimeter_worst&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;107.26&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;33.60&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.41&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;84.11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;97.66&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;125.40&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;251.20&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▇▃▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;area_worst&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;880.58&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;569.36&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;185.20&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;515.30&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;686.50&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1084.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4254.00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▂▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;smoothness_worst&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.22&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▂▇▇▂▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;compactness_worst&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.21&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.34&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.06&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▅▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;concavity_worst&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.27&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.21&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.38&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.25&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▅▂▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;concave points_worst&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.06&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.29&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▅▇▅▃▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;symmetry_worst&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.29&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.06&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.66&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▅▇▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;fractal_dimension_worst&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.08&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.06&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.08&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.21&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▃▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Skimr: 0.15 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;data-explorer&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data Explorer&lt;/h2&gt;
&lt;p&gt;Is a imho a prettier option with individual cool plots and a super powerfull(but slow) report creation tool when working outside of an Rmarkdownm document&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df %&amp;gt;% 
  DataExplorer::plot_intro()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019/08/15/index_files/figure-html/Data%20Explorer%20%20individual%20plots-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df %&amp;gt;% 
  DataExplorer::plot_bar()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019/08/15/index_files/figure-html/Data%20Explorer%20%20individual%20plots-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df %&amp;gt;% 
  DataExplorer::plot_correlation()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019/08/15/index_files/figure-html/Data%20Explorer%20%20individual%20plots-3.png&#34; width=&#34;672&#34; /&gt;Data Explorer individual plots: 1.05 sec elapsed&lt;/p&gt;
&lt;p&gt;There are much more amaziong tools such as the &lt;a href=&#34;https://www.data-imaginist.com/2019/a-flurry-of-facets/&#34;&gt;ggforce package&lt;/a&gt; , but I hope you get the gist of the exploration stage.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;modeling&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Modeling&lt;/h1&gt;
&lt;p&gt;For now I am going to focus on the tools provided by the tidymodels packages and the KNN, in the future I may come back to add more models and probably to play around the DALEX package a little bit.&lt;/p&gt;
&lt;p&gt;Just to remember M is Malignant and B is Benign, we are trying to correcly classify our patients, I am going to ignore the id Varible since it should not be reliaded upon to generate predictions(Even though it may capture some interesting effects such as better screening for patients on the latter id’s).&lt;/p&gt;
&lt;div id=&#34;train-test-split&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Train Test Split&lt;/h2&gt;
&lt;p&gt;Usually we split our data into training and test data to ensure a fair evaluation of the models or parameters being tested(hoping to avoid overfitting).&lt;/p&gt;
&lt;p&gt;The workflow for the tidymodels is that we first split our data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_split &amp;lt;- df %&amp;gt;% 
  rsample::initial_split(prop = 0.8)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Initial Split: 0 sec elapsed&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_training &amp;lt;- df_split %&amp;gt;% training()
df_testing &amp;lt;- df_split %&amp;gt;% testing()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Train test split: 0.02 sec elapsed&lt;/p&gt;
&lt;p&gt;Then we model on our Training Data&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;recipes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Recipes&lt;/h2&gt;
&lt;p&gt;Recipes are used to preprocess our data, the main mistake here is using the whole data set.&lt;/p&gt;
&lt;p&gt;The recipe package helps us with this process.&lt;/p&gt;
&lt;p&gt;For those not familiarized with the formula notation I am fitting the model on all variables except the id variable.&lt;/p&gt;
&lt;p&gt;I am than Normalizing my data since the KNN alghoritm is sensible to the scale of the variables being used, I am also excluding variables with high absolute correlation amongst themselves.&lt;/p&gt;
&lt;p&gt;Recipes are easy to read and can be quite complex&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_recipe &amp;lt;- training(df_split) %&amp;gt;% 
  recipe(diagnosis ~ .) %&amp;gt;%
  step_rm(id) %&amp;gt;% 
  step_center(all_predictors()) %&amp;gt;% 
  step_scale(all_predictors(),all_numeric()) %&amp;gt;% 
  step_corr(all_predictors())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;recipes: 0 sec elapsed&lt;/p&gt;
&lt;p&gt;We could then create our train and test data frames by baking our recipe and juicing our recipe&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# df_testing &amp;lt;- df_recipe %&amp;gt;% 
#   bake(testing(df_split))
# df_testing
#df_training &amp;lt;- juice(df_recipe)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;unnamed-chunk-1: 0 sec elapsed&lt;/p&gt;
&lt;p&gt;But I am going for a Bayes search approch&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;cross-validation-and-bayes-search&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Cross Validation and Bayes Search&lt;/h2&gt;
&lt;div id=&#34;cross-validation&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Cross Validation&lt;/h3&gt;
&lt;p&gt;We further divide our data frame into folds in order to improve our certainty that the ideal number of neighbours is right.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cv_splits &amp;lt;- df_testing %&amp;gt;% vfold_cv(v = 5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cvfold split: 0.02 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-the-new-tune-package-currently-on-github&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Using the new tune package currently on github&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tune)
knn_mod &amp;lt;- 
  nearest_neighbor(neighbors = tune(), weight_func = tune()) %&amp;gt;% 
  set_engine(&amp;quot;kknn&amp;quot;) %&amp;gt;% 
  set_mode(&amp;quot;classification&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;unnamed-chunk-2: 0.05 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;combining-everything-so-far-in-the-new-package-workflow&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Combining everything so far in the new package workflow&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(workflows)
knn_wflow &amp;lt;- 
  workflow() %&amp;gt;% 
  add_model(knn_mod) %&amp;gt;% 
  add_recipe(df_recipe)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;unnamed-chunk-3: 0.04 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;limiting-our-search&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Limiting our search&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knn_param &amp;lt;- 
  knn_wflow %&amp;gt;% 
  parameters() %&amp;gt;% 
    update(
    neighbors = neighbors(c(3, 50)),
    weight_func = weight_func(values = c(&amp;quot;rectangular&amp;quot;, &amp;quot;inv&amp;quot;, &amp;quot;gaussian&amp;quot;, &amp;quot;triangular&amp;quot;))
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;unnamed-chunk-4: 0.03 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;searching-for-the-best-model&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Searching for the best model&lt;/h3&gt;
&lt;p&gt;I used 5 iterations as the limit for the process because of printing reasons.&lt;/p&gt;
&lt;p&gt;Keep in mind that mtune will maximize just the first metric from the package yardstick&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ctrl &amp;lt;- control_bayes(verbose = TRUE,no_improve = 5)
set.seed(42)
knn_search &amp;lt;- tune_bayes(knn_wflow,
                         resamples = cv_splits,
                         initial = 5,
                         iter = 20,
                         param_info = knn_param,
                         control = ctrl,
                         metrics = metric_set(roc_auc,accuracy))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;gt;  Generating a set of 5 initial parameter results&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## v Initialization complete&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Optimizing roc_auc using the expected improvement&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Iteration 1 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Current best:      roc_auc=0.9706 (@iter 0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Gaussian process model&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## v Gaussian process model&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Generating 139 candidates&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Predicted candidates&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i neighbors=31, weight_func=inv&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Estimating performance&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## v Estimating performance&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;U+24E7&amp;gt; Newest results: roc_auc=0.969 (+/-0.013)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Iteration 2 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Current best:      roc_auc=0.9706 (@iter 0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Gaussian process model&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## v Gaussian process model&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Generating 138 candidates&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Predicted candidates&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i neighbors=3, weight_func=rectangular&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Estimating performance&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## v Estimating performance&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;U+24E7&amp;gt; Newest results: roc_auc=0.9538 (+/-0.0208)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Iteration 3 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Current best:      roc_auc=0.9706 (@iter 0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Gaussian process model&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## v Gaussian process model&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Generating 137 candidates&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Predicted candidates&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i neighbors=50, weight_func=rectangular&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Estimating performance&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## v Estimating performance&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;U+24E7&amp;gt; Newest results: roc_auc=0.9432 (+/-0.0214)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Iteration 4 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Current best:      roc_auc=0.9706 (@iter 0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Gaussian process model&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## v Gaussian process model&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Generating 136 candidates&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Predicted candidates&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i neighbors=15, weight_func=rectangular&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Estimating performance&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## v Estimating performance&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;U+24E7&amp;gt; Newest results: roc_auc=0.9676 (+/-0.0184)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Iteration 5 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Current best:      roc_auc=0.9706 (@iter 0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Gaussian process model&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## v Gaussian process model&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Generating 135 candidates&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Predicted candidates&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i neighbors=3, weight_func=gaussian&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Estimating performance&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## v Estimating performance&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;U+24E7&amp;gt; Newest results: roc_auc=0.9562 (+/-0.0205)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ! No improvement for 5 iterations; returning current results.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bayes Search: 26.38 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;visualizing-our-search&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Visualizing our search&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;autoplot(knn_search, type = &amp;quot;performance&amp;quot;, metric = &amp;quot;accuracy&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019/08/15/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;unnamed-chunk-5: 0.16 sec elapsed&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;autoplot(knn_search, type = &amp;quot;performance&amp;quot;, metric = &amp;quot;roc_auc&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019/08/15/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;unnamed-chunk-6: 0.2 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;seing-the-best-result&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Seing the best result&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;collect_metrics(knn_search) %&amp;gt;% 
  dplyr::filter(.metric == &amp;quot;accuracy&amp;quot;) %&amp;gt;% 
  arrange(mean %&amp;gt;% desc)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 8
##    neighbors weight_func .iter .metric  .estimator  mean     n std_err
##        &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;
##  1         3 gaussian        5 accuracy binary     0.939     5  0.0261
##  2         3 rectangular     2 accuracy binary     0.939     5  0.0261
##  3         5 inv             0 accuracy binary     0.939     5  0.0295
##  4        13 inv             0 accuracy binary     0.939     5  0.0221
##  5        42 gaussian        0 accuracy binary     0.939     5  0.0294
##  6        15 rectangular     4 accuracy binary     0.938     5  0.0263
##  7        33 inv             0 accuracy binary     0.930     5  0.0259
##  8        31 inv             1 accuracy binary     0.929     5  0.0222
##  9        27 rectangular     0 accuracy binary     0.921     5  0.0253
## 10        50 rectangular     3 accuracy binary     0.859     5  0.0207&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;unnamed-chunk-7: 0.03 sec elapsed&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;collect_metrics(knn_search) %&amp;gt;% 
  dplyr::filter(.metric == &amp;quot;roc_auc&amp;quot;) %&amp;gt;% 
  arrange(mean %&amp;gt;% desc)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 8
##    neighbors weight_func .iter .metric .estimator  mean     n std_err
##        &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;
##  1        33 inv             0 roc_auc binary     0.971     5  0.0165
##  2        31 inv             1 roc_auc binary     0.969     5  0.0130
##  3        42 gaussian        0 roc_auc binary     0.968     5  0.0182
##  4        15 rectangular     4 roc_auc binary     0.968     5  0.0184
##  5        13 inv             0 roc_auc binary     0.967     5  0.0203
##  6        27 rectangular     0 roc_auc binary     0.961     5  0.0168
##  7         5 inv             0 roc_auc binary     0.959     5  0.0182
##  8         3 gaussian        5 roc_auc binary     0.956     5  0.0205
##  9         3 rectangular     2 roc_auc binary     0.954     5  0.0208
## 10        50 rectangular     3 roc_auc binary     0.943     5  0.0214&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;unnamed-chunk-8: 0.03 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;extracting-the-best-model&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Extracting the best model&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;best_metrics &amp;lt;- collect_metrics(knn_search) %&amp;gt;% 
  dplyr::filter(.metric == &amp;quot;roc_auc&amp;quot;) %&amp;gt;% 
  arrange(mean %&amp;gt;% desc) %&amp;gt;% 
  head(1) %&amp;gt;% 
  select(neighbors,weight_func) %&amp;gt;% 
  as.list()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;unnamed-chunk-9: 0.01 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-production-model&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Creating production model&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;production_knn &amp;lt;-  
  nearest_neighbor(neighbors = best_metrics$neighbors,weight_func = best_metrics$weight_func) %&amp;gt;% 
  set_engine(&amp;quot;kknn&amp;quot;) %&amp;gt;% 
  set_mode(&amp;quot;classification&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;unnamed-chunk-10: 0 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-production-wflow&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Creating production wflow&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;production_wflow &amp;lt;-   workflow() %&amp;gt;% 
  add_model(production_knn) %&amp;gt;% 
  add_recipe(df_recipe)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;unnamed-chunk-11: 0 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;finally-applying-testing-production-model&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Finally applying testing production model&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fit_prod &amp;lt;- fit(production_wflow,df_training)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fitting production: 0.28 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;metrics&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Metrics&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fit_prod %&amp;gt;% predict(df_testing) %&amp;gt;% 
  bind_cols(df_testing %&amp;gt;% transmute(diagnosis = diagnosis %&amp;gt;% as.factor())) %&amp;gt;% 
  yardstick::metrics(truth = diagnosis,estimate = .pred_class)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 3
##   .metric  .estimator .estimate
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;
## 1 accuracy binary         0.965
## 2 kap      binary         0.926&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Calculating metrics: 0.03 sec elapsed&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;predict(fit_prod,df_testing,type = &amp;#39;prob&amp;#39;) %&amp;gt;%
  bind_cols(df_testing %&amp;gt;% transmute(diagnosis = diagnosis %&amp;gt;% as.factor())) %&amp;gt;% 
  yardstick::roc_auc(truth = diagnosis,.pred_B)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 3
##   .metric .estimator .estimate
##   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;
## 1 roc_auc binary         0.989&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Calculating metrics auc: 0.04 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;another-visualization&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Another visualization&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knn_naive &amp;lt;- 
  nearest_neighbor(neighbors = tune()) %&amp;gt;% 
  set_engine(&amp;quot;kknn&amp;quot;) %&amp;gt;% 
  set_mode(&amp;quot;classification&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;unnamed-chunk-12: 0 sec elapsed&lt;/p&gt;
&lt;div id=&#34;combining-everything-so-far-in-the-new-package-workflow-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Combining everything so far in the new package workflow&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knn_wflow_naive &amp;lt;- 
  workflow() %&amp;gt;% 
  add_model(knn_naive) %&amp;gt;% 
  add_recipe(df_recipe)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;unnamed-chunk-13: 0 sec elapsed&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knn_naive_param &amp;lt;- 
  knn_wflow %&amp;gt;% 
  parameters() %&amp;gt;% 
    update(
    neighbors = neighbors(c(10, 50))
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;unnamed-chunk-14: 0.02 sec elapsed&lt;/p&gt;
&lt;p&gt;One advantage of the naive search is that it is easy to parallelize&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all_cores &amp;lt;- parallel::detectCores(logical = FALSE)

library(doParallel)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: foreach&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;foreach&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:purrr&amp;#39;:
## 
##     accumulate, when&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: iterators&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: parallel&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cl &amp;lt;- makePSOCKcluster(all_cores)
registerDoParallel(cl)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;set up parallel: 1.29 sec elapsed&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ctrl &amp;lt;- control_grid(verbose = FALSE)
set.seed(42)
naive_search &amp;lt;- tune_grid(knn_wflow_naive,
                         resamples = cv_splits,
                         param_info = knn_naive_param,
                         control = ctrl,
                         grid = 50,
                         metrics = metric_set(roc_auc,accuracy))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;naive grid search: 6.31 sec elapsed&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;best_naive_metrics &amp;lt;- collect_metrics(naive_search) %&amp;gt;% 
  dplyr::filter(.metric == &amp;quot;roc_auc&amp;quot;) %&amp;gt;% 
  arrange(mean %&amp;gt;% desc)
DT::datatable(best_naive_metrics,options = list(pageLength = 5, scrollX=T))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:auto;&#34; class=&#34;datatables html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;filter&#34;:&#34;none&#34;,&#34;data&#34;:[[&#34;1&#34;,&#34;2&#34;,&#34;3&#34;,&#34;4&#34;,&#34;5&#34;,&#34;6&#34;,&#34;7&#34;,&#34;8&#34;,&#34;9&#34;,&#34;10&#34;,&#34;11&#34;,&#34;12&#34;,&#34;13&#34;,&#34;14&#34;,&#34;15&#34;,&#34;16&#34;,&#34;17&#34;,&#34;18&#34;,&#34;19&#34;,&#34;20&#34;,&#34;21&#34;,&#34;22&#34;,&#34;23&#34;,&#34;24&#34;,&#34;25&#34;,&#34;26&#34;,&#34;27&#34;,&#34;28&#34;,&#34;29&#34;,&#34;30&#34;,&#34;31&#34;,&#34;32&#34;,&#34;33&#34;,&#34;34&#34;,&#34;35&#34;,&#34;36&#34;,&#34;37&#34;],[18,20,24,25,26,28,29,30,31,32,17,21,34,35,22,23,15,16,36,37,38,39,40,41,42,46,10,11,12,13,14,43,44,45,47,48,49],[&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;],[&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;],[0.974487179487179,0.974487179487179,0.973717948717949,0.973717948717949,0.973717948717949,0.973717948717949,0.973717948717949,0.973717948717949,0.973717948717949,0.973717948717949,0.972948717948718,0.972820512820513,0.972179487179487,0.972179487179487,0.972051282051282,0.972051282051282,0.971410256410256,0.971410256410256,0.970641025641026,0.970641025641026,0.970641025641026,0.970641025641026,0.970641025641026,0.970641025641026,0.970641025641026,0.970641025641026,0.969871794871795,0.969871794871795,0.969871794871795,0.969871794871795,0.969871794871795,0.969102564102564,0.969102564102564,0.969102564102564,0.969102564102564,0.969102564102564,0.969102564102564],[10,10,5,5,10,10,5,10,5,10,5,5,10,5,10,5,5,5,5,5,10,5,5,5,10,10,5,5,5,5,10,5,5,5,5,5,10],[0.00941568502832165,0.00941568502832165,0.0146765476846401,0.0146765476846401,0.00978436512309337,0.00978436512309337,0.0146765476846401,0.00978436512309337,0.0146765476846401,0.00978436512309337,0.0152483279604168,0.0134532941787636,0.0105578910181491,0.0158368365272237,0.00933992910550258,0.0140098936582539,0.0159840485902653,0.0159840485902653,0.0165285201685211,0.0165285201685211,0.0110190134456807,0.0165285201685211,0.0165285201685211,0.0165285201685211,0.0110190134456807,0.01089902787098,0.0168286018698568,0.0168286018698568,0.0168286018698568,0.0168286018698568,0.0112190679132379,0.0173295208976781,0.0173295208976781,0.0173295208976781,0.0173295208976781,0.0173295208976781,0.0115530139317854]],&#34;container&#34;:&#34;&lt;table class=\&#34;display\&#34;&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt; &lt;\/th&gt;\n      &lt;th&gt;neighbors&lt;\/th&gt;\n      &lt;th&gt;.metric&lt;\/th&gt;\n      &lt;th&gt;.estimator&lt;\/th&gt;\n      &lt;th&gt;mean&lt;\/th&gt;\n      &lt;th&gt;n&lt;\/th&gt;\n      &lt;th&gt;std_err&lt;\/th&gt;\n    &lt;\/tr&gt;\n  &lt;\/thead&gt;\n&lt;\/table&gt;&#34;,&#34;options&#34;:{&#34;pageLength&#34;:5,&#34;scrollX&#34;:true,&#34;columnDefs&#34;:[{&#34;className&#34;:&#34;dt-right&#34;,&#34;targets&#34;:[1,4,5,6]},{&#34;orderable&#34;:false,&#34;targets&#34;:0}],&#34;order&#34;:[],&#34;autoWidth&#34;:false,&#34;orderClasses&#34;:false,&#34;lengthMenu&#34;:[5,10,25,50,100]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;unnamed-chunk-15: 0.03 sec elapsed&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p &amp;lt;- best_naive_metrics %&amp;gt;% 
  ggplot() +
  aes(neighbors,mean) +
  geom_point() +
  ylim(.95,1)
p&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019/08/15/index_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;672&#34; /&gt;unnamed-chunk-16: 0.16 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;checking-the-timing-table&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Checking the timing table&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(x &amp;lt;- tic.log() %&amp;gt;%
  as.character() %&amp;gt;% 
  tibble(log = .) %&amp;gt;% 
  separate(log,sep = &amp;#39;: &amp;#39;,into = c(&amp;#39;name&amp;#39;,&amp;#39;time&amp;#39;))) %&amp;gt;% 
  separate(time, sep = &amp;#39; &amp;#39;,c(&amp;#39;measure&amp;#39;,&amp;#39;units&amp;#39;)) %&amp;gt;%
  mutate(measure = measure %&amp;gt;% as.numeric()) %&amp;gt;% 
  arrange(measure %&amp;gt;% desc())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Expected 2 pieces. Additional pieces discarded in 31 rows [1, 2, 3, 4,
## 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...].&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 31 x 3
##    name                            measure units
##    &amp;lt;chr&amp;gt;                             &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;
##  1 Bayes Search                      26.4  sec  
##  2 naive grid search                  6.31 sec  
##  3 Loading Libraries                  3.65 sec  
##  4 set up parallel                    1.29 sec  
##  5 Data Explorer  individual plots    1.05 sec  
##  6 Fitting production                 0.28 sec  
##  7 unnamed-chunk-6                    0.2  sec  
##  8 Set Chunk                          0.16 sec  
##  9 unnamed-chunk-5                    0.16 sec  
## 10 unnamed-chunk-16                   0.16 sec  
## # … with 21 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;unnamed-chunk-17: 0.02 sec elapsed&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>exploratory data analysis: basic statistical inference</title>
      <link>/2019/04/05/exploratory-data-analysis-basic-statistical-inference/</link>
      <pubDate>Fri, 05 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/04/05/exploratory-data-analysis-basic-statistical-inference/</guid>
      <description>



</description>
    </item>
    
    <item>
      <title>exploratory data analysis: basic pandas and dplyr</title>
      <link>/2019/03/23/exploratory-data-analysis-basic-pandas-and-dplyr/</link>
      <pubDate>Sat, 23 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/03/23/exploratory-data-analysis-basic-pandas-and-dplyr/</guid>
      <description>
This is an basic example of how you can use either R or Python to accomplish the same goals, I really enjoy using the tidyverse but as you will see sometimes Python is just the more intuitive option. If you find yourself confused on whether a code chunk is an R or Python code please ask me or check my github page for this project. &lt;br&gt; &lt;br&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#getting-started-we-will-use-multiple-functions-from-both-languages&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; Getting Started, we will use multiple functions from both languages&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#how-to-set-up-reticulate&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1&lt;/span&gt; How to set up reticulate?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#setting-root-folder&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1.1&lt;/span&gt; Setting root folder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#anchor&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1.2&lt;/span&gt; Libraries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#python&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; Python&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#knowing-data-frames&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.1&lt;/span&gt; Knowing data frames&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#defining-pandas-series&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.1.1&lt;/span&gt; Defining pandas series&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#indexing&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.1.2&lt;/span&gt; Indexing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#combining-two-pd-series&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2&lt;/span&gt; Combining two pd series&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#create-pd-series-from-dictionary-1&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2.1&lt;/span&gt; Create pd series from dictionary 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#combining-the-pd-series-into-a-data-frame&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2.2&lt;/span&gt; Combining the pd series into a data frame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-frame-properties&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2.3&lt;/span&gt; Data frame properties&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#creating-some-new-columns&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2.4&lt;/span&gt; Creating some new columns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ordering-a-data-frame&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2.5&lt;/span&gt; Ordering a data frame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#subsetting&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2.6&lt;/span&gt; Subsetting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#real-data&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.3&lt;/span&gt; Real data&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#reading-data&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.3.1&lt;/span&gt; Reading data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#py_types_columns&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.3.2&lt;/span&gt; Variable types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#basic-description&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.3.3&lt;/span&gt; Basic Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#subsetting-data&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.3.4&lt;/span&gt; Subsetting data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#creating-new-columns-with-real-data&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.3.5&lt;/span&gt; Creating new columns with real data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#creating-a-new-smaller-data-frame&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.3.6&lt;/span&gt; Creating a new smaller data frame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#plotting-an-line-plot&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.3.7&lt;/span&gt; Plotting an line plot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#filtering_py&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.3.8&lt;/span&gt; Filtering and replace data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#groupby-example&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.3.9&lt;/span&gt; Groupby example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ploting-an-histogram&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.3.10&lt;/span&gt; Ploting an histogram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#missing_values_py&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.3.11&lt;/span&gt; Handling Missing values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#replacing-names-with-an-dictionary&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.3.12&lt;/span&gt; Replacing names with an dictionary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#passing-objects&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.4&lt;/span&gt; Passing Objects&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#python-to-r&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.4.1&lt;/span&gt; Python to R&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#r&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; R&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#knowing-data-frames-1&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.1&lt;/span&gt; Knowing data frames&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#defining-an-data-frame&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.1.1&lt;/span&gt; Defining an data frame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#index-search&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.1.2&lt;/span&gt; Index search&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#creating-an-data-frame-from-two-r-series&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.2&lt;/span&gt; Creating an data frame from two R series&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#create-a-date-frame-using-an-list&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.2.1&lt;/span&gt; Create a date frame using an list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#create-a-date-frame-using-an-list-2&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.2.2&lt;/span&gt; Create a date frame using an list 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#subsetting-an-data-frame-using-join-or-cbind&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.2.3&lt;/span&gt; Subsetting an data frame using join or cbind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#some-info-on-our-data-frame&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.2.4&lt;/span&gt; Some info on our data frame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#creating-new-columns-using-mutate-and-basic-r&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.2.5&lt;/span&gt; Creating new columns using mutate and basic R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ordering-an-data-frame-using-the-tidy-way-arrange-or-order.&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.2.6&lt;/span&gt; Ordering an data frame using the tidy way arrange or order.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#filtering-rows-using-standard-r-code-or-filter.&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.2.7&lt;/span&gt; Filtering rows using standard R code or filter.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#real-case&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.3&lt;/span&gt; Real Case&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#two-way-of-importing-an-csv&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.3.1&lt;/span&gt; Two way of importing an csv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lets-look-at-our-data&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.3.2&lt;/span&gt; Let’s look at our data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#r_types_columns&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.3.3&lt;/span&gt; Types of columns r&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#basic-description-real-data-using-glimpse-and-str&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.3.4&lt;/span&gt; Basic Description real data using Glimpse and str&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#subsetting-data-with-select-or-base-r&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.3.5&lt;/span&gt; Subsetting Data with select or base R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#creating-a-new-smaller-data-frame-using-transmute-and-base&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.3.6&lt;/span&gt; Creating a new smaller data frame using transmute and base&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ploting-with-ggplot&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.3.7&lt;/span&gt; Ploting with ggplot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#filtering_r&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.3.8&lt;/span&gt; Filtering and replace data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#groupby-example-in-tidyverse&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.3.9&lt;/span&gt; Groupby example in tidyverse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ploting-an-histogram-using-ggplot2&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.3.10&lt;/span&gt; Ploting an histogram using ggplot2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#missing_values_r&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.3.11&lt;/span&gt; Handling Missing values in R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#replacing-names-with-an-case-when-aproach&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.3.12&lt;/span&gt; Replacing names with an case when aproach&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#passing-objects-to-python&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.4&lt;/span&gt; Passing Objects to Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;I am currently doing exercises from &lt;a href=&#34;https://github.com/sn3fru/datascience_course&#34;&gt;digital house brasil&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;getting-started-we-will-use-multiple-functions-from-both-languages&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Getting Started, we will use multiple functions from both languages&lt;/h1&gt;
&lt;div id=&#34;how-to-set-up-reticulate&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1&lt;/span&gt; How to set up reticulate?&lt;/h2&gt;
&lt;div id=&#34;setting-root-folder&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1.1&lt;/span&gt; Setting root folder&lt;/h3&gt;
&lt;p&gt;I recommend using the Files tab to find the your system path to the folder containig all the data.&lt;/p&gt;
&lt;p&gt;Use opts_knit to guarantee that your markdown functions will search for files
in the folder specified, it is better that setwd() because it works on
all languages.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knitr::opts_knit$set(root.dir = normalizePath(
  &amp;quot;~/R/Blog/content/post/data&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;anchor&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1.2&lt;/span&gt; Libraries&lt;/h3&gt;
&lt;img src=&#34;https://media.giphy.com/media/8YZEKuDRHPtgZTx7Rv/giphy.gif&#34; /&gt;
&lt;details&gt;
&lt;summary&gt;R part&lt;/summary&gt;
&lt;p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(reticulate)
library(caTools)
library(roperators)
library(tidyverse)
set.seed(123)&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Python part&lt;/summary&gt;
&lt;p&gt;
&lt;p&gt;I am using my second virtual conda if you have just the root
switch to conda_list()[[1]][1].&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;conda_list()[[1]][2] %&amp;gt;% 
  use_condaenv(required = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s see what version of python this env is running.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import platform
print(platform.python_version())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3.7.2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some basic Data Science Libraries.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import os&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;python&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Python&lt;/h1&gt;
&lt;div id=&#34;knowing-data-frames&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1&lt;/span&gt; Knowing data frames&lt;/h2&gt;
&lt;div id=&#34;defining-pandas-series&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1.1&lt;/span&gt; Defining pandas series&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/EPcvhM28ER9XW/giphy.gif&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data = pd.Series([0.25, 0.5, 0.75, 1.0])
data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 0    0.25
## 1    0.50
## 2    0.75
## 3    1.00
## dtype: float64&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data.values&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([0.25, 0.5 , 0.75, 1.  ])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data.index&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## RangeIndex(start=0, stop=4, step=1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data[1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 0.5&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data[1:3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1    0.50
## 2    0.75
## dtype: float64&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;indexing&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1.2&lt;/span&gt; Indexing&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data = pd.Series([0.25, 0.5, 0.75, 1.0],
                 index=[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;])
data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## a    0.25
## b    0.50
## c    0.75
## d    1.00
## dtype: float64&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data[&amp;#39;b&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 0.5&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;combining-two-pd-series&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2&lt;/span&gt; Combining two pd series&lt;/h2&gt;
&lt;div id=&#34;create-pd-series-from-dictionary-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.1&lt;/span&gt; Create pd series from dictionary 1&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;population_dict = {&amp;#39;California&amp;#39;: 38332521,
                   &amp;#39;Florida&amp;#39;: 19552860,
                   &amp;#39;Illinois&amp;#39;: 12882135,
                   &amp;#39;New York&amp;#39;: 19651127,  
                   &amp;#39;Texas&amp;#39;: 26448193,}
population = pd.Series(population_dict)

population&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## California    38332521
## Florida       19552860
## Illinois      12882135
## New York      19651127
## Texas         26448193
## dtype: int64&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;population[&amp;#39;California&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 38332521&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;population[&amp;#39;California&amp;#39;:&amp;#39;Illinois&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## California    38332521
## Florida       19552860
## Illinois      12882135
## dtype: int64&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;one more example.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;area_dict = {&amp;#39;California&amp;#39;: 423967, 
             &amp;#39;Florida&amp;#39;: 170312,
             &amp;#39;Illinois&amp;#39;: 149995,
             &amp;#39;New York&amp;#39;: 141297,
             &amp;#39;Texas&amp;#39;: 695662}
             
area = pd.Series(area_dict)

area&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## California    423967
## Florida       170312
## Illinois      149995
## New York      141297
## Texas         695662
## dtype: int64&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;combining-the-pd-series-into-a-data-frame&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.2&lt;/span&gt; Combining the pd series into a data frame&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states = pd.DataFrame({&amp;#39;population&amp;#39;: population,
                       &amp;#39;area&amp;#39;: area})
states&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             population    area
## California    38332521  423967
## Florida       19552860  170312
## Illinois      12882135  149995
## New York      19651127  141297
## Texas         26448193  695662&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(states)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;pandas.core.frame.DataFrame&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(states[&amp;quot;population&amp;quot;])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;pandas.core.series.Series&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type([states[&amp;quot;population&amp;quot;]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;list&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;data-frame-properties&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.3&lt;/span&gt; Data frame properties&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states.shape&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## (5, 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states.info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;pandas.core.frame.DataFrame&amp;#39;&amp;gt;
## Index: 5 entries, California to Texas
## Data columns (total 2 columns):
## population    5 non-null int64
## area          5 non-null int64
## dtypes: int64(2)
## memory usage: 280.0+ bytes&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states.index&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Index([&amp;#39;California&amp;#39;, &amp;#39;Florida&amp;#39;, &amp;#39;Illinois&amp;#39;, &amp;#39;New York&amp;#39;, &amp;#39;Texas&amp;#39;], dtype=&amp;#39;object&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states.columns&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Index([&amp;#39;population&amp;#39;, &amp;#39;area&amp;#39;], dtype=&amp;#39;object&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states[&amp;#39;area&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## California    423967
## Florida       170312
## Illinois      149995
## New York      141297
## Texas         695662
## Name: area, dtype: int64&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-some-new-columns&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.4&lt;/span&gt; Creating some new columns&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states[&amp;#39;density&amp;#39;] = states[&amp;#39;population&amp;#39;] / states[&amp;#39;area&amp;#39;]
states&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             population    area     density
## California    38332521  423967   90.413926
## Florida       19552860  170312  114.806121
## Illinois      12882135  149995   85.883763
## New York      19651127  141297  139.076746
## Texas         26448193  695662   38.018740&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;ordering-a-data-frame&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.5&lt;/span&gt; Ordering a data frame&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states.sort_values([&amp;#39;population&amp;#39;], ascending = True)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             population    area     density
## Illinois      12882135  149995   85.883763
## Florida       19552860  170312  114.806121
## New York      19651127  141297  139.076746
## Texas         26448193  695662   38.018740
## California    38332521  423967   90.413926&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states.sort_values([&amp;#39;area&amp;#39;], ascending = True)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             population    area     density
## New York      19651127  141297  139.076746
## Illinois      12882135  149995   85.883763
## Florida       19552860  170312  114.806121
## California    38332521  423967   90.413926
## Texas         26448193  695662   38.018740&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states.sort_values([&amp;#39;density&amp;#39;], ascending = True)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             population    area     density
## Texas         26448193  695662   38.018740
## Illinois      12882135  149995   85.883763
## California    38332521  423967   90.413926
## Florida       19552860  170312  114.806121
## New York      19651127  141297  139.076746&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;subsetting&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.6&lt;/span&gt; Subsetting&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states[&amp;#39;Florida&amp;#39;:&amp;#39;Illinois&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           population    area     density
## Florida     19552860  170312  114.806121
## Illinois    12882135  149995   85.883763&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states[1:3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           population    area     density
## Florida     19552860  170312  114.806121
## Illinois    12882135  149995   85.883763&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data_pop = (states[&amp;#39;population&amp;#39;] &amp;gt; 19552860) &amp;amp; (states[&amp;#39;area&amp;#39;]&amp;gt;423967)

data_pop&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## California    False
## Florida       False
## Illinois      False
## New York      False
## Texas          True
## dtype: bool&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states[(states[&amp;#39;population&amp;#39;] &amp;gt; 19552860) &amp;amp; (states[&amp;#39;area&amp;#39;]&amp;gt;423967)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        population    area   density
## Texas    26448193  695662  38.01874&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states[[&amp;#39;area&amp;#39;,&amp;#39;density&amp;#39;]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##               area     density
## California  423967   90.413926
## Florida     170312  114.806121
## Illinois    149995   85.883763
## New York    141297  139.076746
## Texas       695662   38.018740&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states[states.density &amp;gt; 100]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           population    area     density
## Florida     19552860  170312  114.806121
## New York    19651127  141297  139.076746&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states.loc[states.density &amp;gt; 100, [&amp;#39;population&amp;#39;, &amp;#39;density&amp;#39;]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           population     density
## Florida     19552860  114.806121
## New York    19651127  139.076746&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states.loc[states.density &amp;gt; 100][[&amp;#39;population&amp;#39;, &amp;#39;density&amp;#39;]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           population     density
## Florida     19552860  114.806121
## New York    19651127  139.076746&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states.loc[&amp;#39;California&amp;#39;, &amp;#39;density&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 90.41392608386974&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states.loc[&amp;#39;California&amp;#39;][[&amp;#39;density&amp;#39;]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## density    90.413926
## Name: California, dtype: float64&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states.iloc[0, 2]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 90.41392608386974&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;real-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.3&lt;/span&gt; Real data&lt;/h2&gt;
&lt;div id=&#34;reading-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.3.1&lt;/span&gt; Reading data&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sales = pd.DataFrame(pd.read_csv(&amp;#39;2019-03-23-exploratory-data-analysis-basic-pandas-and-dplyr/UKretail.csv&amp;#39;,encoding=&amp;#39;latin&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sales.head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   InvoiceNo StockCode  ... CustomerID         Country
## 0    536365     22752  ...    17850.0  United Kingdom
## 1    536365     71053  ...    17850.0  United Kingdom
## 2    536365    84029G  ...    17850.0  United Kingdom
## 3    536365    85123A  ...    17850.0  United Kingdom
## 4    536366     22633  ...    17850.0  United Kingdom
## 
## [5 rows x 8 columns]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sales.tail(3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        InvoiceNo StockCode  ... CustomerID  Country
## 325142    581587     22899  ...    12680.0   France
## 325143    581587     23254  ...    12680.0   France
## 325144    581587     23256  ...    12680.0   France
## 
## [3 rows x 8 columns]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sales.index&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## RangeIndex(start=0, stop=325145, step=1)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;py_types_columns&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.3.2&lt;/span&gt; Variable types&lt;/h3&gt;
&lt;p&gt;If you need to &lt;a href=&#34;#r_types_columns&#34;&gt;return&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(sales)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;pandas.core.frame.DataFrame&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(sales[&amp;quot;CustomerID&amp;quot;])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;pandas.core.series.Series&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type([sales[&amp;quot;CustomerID&amp;quot;]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;list&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;basic-description&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.3.3&lt;/span&gt; Basic Description&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sales.shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## (325145, 8)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sales.columns.values
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([&amp;#39;InvoiceNo&amp;#39;, &amp;#39;StockCode&amp;#39;, &amp;#39;Description&amp;#39;, &amp;#39;Quantity&amp;#39;, &amp;#39;InvoiceDate&amp;#39;,
##        &amp;#39;UnitPrice&amp;#39;, &amp;#39;CustomerID&amp;#39;, &amp;#39;Country&amp;#39;], dtype=object)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sales.info()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;pandas.core.frame.DataFrame&amp;#39;&amp;gt;
## RangeIndex: 325145 entries, 0 to 325144
## Data columns (total 8 columns):
## InvoiceNo      325145 non-null object
## StockCode      325145 non-null object
## Description    324275 non-null object
## Quantity       325145 non-null int64
## InvoiceDate    325145 non-null object
## UnitPrice      325145 non-null float64
## CustomerID     244154 non-null float64
## Country        325145 non-null object
## dtypes: float64(2), int64(1), object(5)
## memory usage: 19.8+ MB&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sales.describe()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             Quantity      UnitPrice     CustomerID
## count  325145.000000  325145.000000  244154.000000
## mean        9.273340       4.845239   15288.823120
## std       154.394112     116.830451    1713.496816
## min    -80995.000000  -11062.060000   12347.000000
## 25%         1.000000       1.250000   13959.000000
## 50%         3.000000       2.080000   15150.000000
## 75%        10.000000       4.130000   16792.750000
## max     12540.000000   38970.000000   18287.000000&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;subsetting-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.3.4&lt;/span&gt; Subsetting data&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sales[:4]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   InvoiceNo StockCode  ... CustomerID         Country
## 0    536365     22752  ...    17850.0  United Kingdom
## 1    536365     71053  ...    17850.0  United Kingdom
## 2    536365    84029G  ...    17850.0  United Kingdom
## 3    536365    85123A  ...    17850.0  United Kingdom
## 
## [4 rows x 8 columns]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sales[&amp;quot;CustomerID&amp;quot;].head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 0    17850.0
## 1    17850.0
## 2    17850.0
## 3    17850.0
## 4    17850.0
## Name: CustomerID, dtype: float64&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sales.loc[:,[&amp;#39;Quantity&amp;#39;]].head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Quantity
## 0         2
## 1         6
## 2         6
## 3         6
## 4         6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sales.iloc[:,[3]].head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Quantity
## 0         2
## 1         6
## 2         6
## 3         6
## 4         6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sales.iloc[0:6,2:3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                            Description
## 0         SET 7 BABUSHKA NESTING BOXES
## 1                  WHITE METAL LANTERN
## 2  KNITTED UNION FLAG HOT WATER BOTTLE
## 3   WHITE HANGING HEART T-LIGHT HOLDER
## 4               HAND WARMER UNION JACK
## 5             HOME BUILDING BLOCK WORD&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-new-columns-with-real-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.3.5&lt;/span&gt; Creating new columns with real data&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sales[&amp;quot;Revenue&amp;quot;] = sales.Quantity * sales.UnitPrice&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sales.head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   InvoiceNo StockCode  ...         Country  Revenue
## 0    536365     22752  ...  United Kingdom    15.30
## 1    536365     71053  ...  United Kingdom    20.34
## 2    536365    84029G  ...  United Kingdom    20.34
## 3    536365    85123A  ...  United Kingdom    15.30
## 4    536366     22633  ...  United Kingdom    11.10
## 
## [5 rows x 9 columns]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-a-new-smaller-data-frame&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.3.6&lt;/span&gt; Creating a new smaller data frame&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;raw_sales = sales[[&amp;quot;Quantity&amp;quot;,&amp;quot;UnitPrice&amp;quot;, &amp;quot;Revenue&amp;quot;]]

raw_sales.head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Quantity  UnitPrice  Revenue
## 0         2       7.65    15.30
## 1         6       3.39    20.34
## 2         6       3.39    20.34
## 3         6       2.55    15.30
## 4         6       1.85    11.10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;raw_sales.info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;pandas.core.frame.DataFrame&amp;#39;&amp;gt;
## RangeIndex: 325145 entries, 0 to 325144
## Data columns (total 3 columns):
## Quantity     325145 non-null int64
## UnitPrice    325145 non-null float64
## Revenue      325145 non-null float64
## dtypes: float64(2), int64(1)
## memory usage: 7.4 MB&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;plotting-an-line-plot&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.3.7&lt;/span&gt; Plotting an line plot&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import matplotlib as plt
from pylab import *

sales.plot(x=&amp;quot;InvoiceDate&amp;quot;, y=&amp;quot;Revenue&amp;quot;, kind=&amp;quot;line&amp;quot;)

plt.show()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019/2019-03/2019-03-23/1/index_files/figure-html/exploratory_data1-34-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;filtering_py&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.3.8&lt;/span&gt; Filtering and replace data&lt;/h3&gt;
&lt;p&gt;To &lt;a href=&#34;#filtering_r&#34;&gt;return&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;cancels = sales[sales[&amp;quot;Revenue&amp;quot;]&amp;lt;0]
cancels.shape&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## (5588, 9)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sales.drop(cancels.index, inplace=True)
sales.shape&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## (319557, 9)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;groupby-example&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.3.9&lt;/span&gt; Groupby example&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;CountryGroups = sales.groupby([&amp;quot;Country&amp;quot;])[&amp;quot;Revenue&amp;quot;].sum().reset_index()
CountryGroups.sort_values(by= &amp;quot;Revenue&amp;quot;, ascending=False)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                  Country      Revenue
## 36        United Kingdom  5311080.101
## 10                  EIRE   176304.590
## 24           Netherlands   165582.790
## 14               Germany   138778.440
## 13                France   127193.680
## 0              Australia    79197.590
## 31                 Spain    36116.710
## 33           Switzerland    34315.240
## 3                Belgium    24014.970
## 25                Norway    23182.220
## 32                Sweden    21762.450
## 20                 Japan    21072.590
## 27              Portugal    20109.410
## 30             Singapore    13383.590
## 6        Channel Islands    12556.740
## 12               Finland    12362.880
## 9                Denmark    11739.370
## 19                 Italy    10837.890
## 16             Hong Kong     8227.020
## 7                 Cyprus     7781.900
## 1                Austria     6100.960
## 18                Israel     4225.780
## 26                Poland     3974.080
## 37           Unspecified     2898.650
## 15                Greece     2677.570
## 17               Iceland     2461.230
## 34                   USA     2388.740
## 5                 Canada     2093.390
## 23                 Malta     1318.990
## 35  United Arab Emirates     1277.500
## 21               Lebanon     1120.530
## 22             Lithuania     1038.560
## 11    European Community      876.550
## 4                 Brazil      602.310
## 28                   RSA      573.180
## 8         Czech Republic      488.580
## 2                Bahrain      343.400
## 29          Saudi Arabia       90.720&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;ploting-an-histogram&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.3.10&lt;/span&gt; Ploting an histogram&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sales[sales[&amp;quot;CustomerID&amp;quot;] == 17850.0][&amp;quot;Revenue&amp;quot;].plot(kind=&amp;quot;hist&amp;quot;)
plt.show()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019/2019-03/2019-03-23/1/index_files/figure-html/exploratory_data1-37-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;another example.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sales[sales[&amp;quot;StockCode&amp;quot;] == &amp;#39;71053&amp;#39;][&amp;quot;Quantity&amp;quot;].hist()
plt.show()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019/2019-03/2019-03-23/1/index_files/figure-html/exploratory_data1-38-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;missing_values_py&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.3.11&lt;/span&gt; Handling Missing values&lt;/h3&gt;
&lt;p&gt;to &lt;a href=&#34;#missing_values_r&#34;&gt;return&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sales.info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;pandas.core.frame.DataFrame&amp;#39;&amp;gt;
## Int64Index: 319557 entries, 0 to 325144
## Data columns (total 9 columns):
## InvoiceNo      319557 non-null object
## StockCode      319557 non-null object
## Description    318687 non-null object
## Quantity       319557 non-null int64
## InvoiceDate    319557 non-null object
## UnitPrice      319557 non-null float64
## CustomerID     238801 non-null float64
## Country        319557 non-null object
## Revenue        319557 non-null float64
## dtypes: float64(3), int64(1), object(5)
## memory usage: 24.4+ MB&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sales.CustomerID.value_counts(dropna=False).nlargest(3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NaN        80756
## 17841.0     4702
## 14911.0     3449
## Name: CustomerID, dtype: int64&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sales.CustomerID.fillna(0, inplace=True)

sales[sales.CustomerID.isnull()]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Empty DataFrame
## Columns: [InvoiceNo, StockCode, Description, Quantity, InvoiceDate, UnitPrice, CustomerID, Country, Revenue]
## Index: []&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sales.info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;pandas.core.frame.DataFrame&amp;#39;&amp;gt;
## Int64Index: 319557 entries, 0 to 325144
## Data columns (total 9 columns):
## InvoiceNo      319557 non-null object
## StockCode      319557 non-null object
## Description    318687 non-null object
## Quantity       319557 non-null int64
## InvoiceDate    319557 non-null object
## UnitPrice      319557 non-null float64
## CustomerID     319557 non-null float64
## Country        319557 non-null object
## Revenue        319557 non-null float64
## dtypes: float64(3), int64(1), object(5)
## memory usage: 24.4+ MB&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;replacing-names-with-an-dictionary&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.3.12&lt;/span&gt; Replacing names with an dictionary&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;mymap = {&amp;#39;United Kingdom&amp;#39;:1, &amp;#39;Netherlands&amp;#39;:2, &amp;#39;Germany&amp;#39;:3, &amp;#39;France&amp;#39;:4, &amp;#39;USA&amp;#39;:5}       

sales = sales.applymap(lambda s: mymap.get(s) if s in mymap else s)

sales.head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   InvoiceNo StockCode  ... Country  Revenue
## 0    536365     22752  ...       1    15.30
## 1    536365     71053  ...       1    20.34
## 2    536365    84029G  ...       1    20.34
## 3    536365    85123A  ...       1    15.30
## 4    536366     22633  ...       1    11.10
## 
## [5 rows x 9 columns]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sales.Country.value_counts().nlargest(7)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1          292640
## 3            5466
## 4            5026
## EIRE         4789
## Spain        1420
## 2            1393
## Belgium      1191
## Name: Country, dtype: int64&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;passing-objects&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.4&lt;/span&gt; Passing Objects&lt;/h2&gt;
&lt;div id=&#34;python-to-r&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.4.1&lt;/span&gt; Python to R&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data2 = pd.Series([0.25, 0.5, 0.75, 1.0])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_t = py$data2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_t&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    0    1    2    3 
## 0.25 0.50 0.75 1.00&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;r&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; R&lt;/h1&gt;
&lt;div id=&#34;knowing-data-frames-1&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.1&lt;/span&gt; Knowing data frames&lt;/h2&gt;
&lt;div id=&#34;defining-an-data-frame&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.1.1&lt;/span&gt; Defining an data frame&lt;/h3&gt;
&lt;p&gt;tidy way &lt;img src=&#34;https://media.giphy.com/media/kKLr7rlj0KwjFfCxHJ/giphy.gif&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;-  tibble(0.25, 0.5, 0.75, 1.0)
data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 4
##   `0.25` `0.5` `0.75`   `1`
##    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1   0.25   0.5   0.75     1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data[2]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 1
##   `0.5`
##   &amp;lt;dbl&amp;gt;
## 1   0.5&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data[2:3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 2
##   `0.5` `0.75`
##   &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
## 1   0.5   0.75&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not using tidyverse.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;-  data.frame(c(0.25, 0.5, 0.75, 1.0))
rownames(data) &amp;lt;- 1:nrow(data)
colnames(data) &amp;lt;- &amp;quot;nope&amp;quot;
data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   nope
## 1 0.25
## 2 0.50
## 3 0.75
## 4 1.00&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;index-search&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.1.2&lt;/span&gt; Index search&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;-  data.frame(c(0.25, 0.5, 0.75, 1.0),row.names = c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;,&amp;quot;d&amp;quot;))
data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   c.0.25..0.5..0.75..1.
## a                  0.25
## b                  0.50
## c                  0.75
## d                  1.00&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data[&amp;quot;b&amp;quot;,]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.5&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-an-data-frame-from-two-r-series&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2&lt;/span&gt; Creating an data frame from two R series&lt;/h2&gt;
&lt;div id=&#34;create-a-date-frame-using-an-list&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2.1&lt;/span&gt; Create a date frame using an list&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;population_dict &amp;lt;- list(
  &amp;#39;California&amp;#39; = 38332521,
  &amp;#39;Florida&amp;#39; = 19552860,
  &amp;#39;Illinois&amp;#39; = 12882135,
  &amp;#39;New York&amp;#39; = 19651127,
  &amp;#39;Texas&amp;#39; = 26448193
  )
population &amp;lt;- population_dict %&amp;gt;% as_tibble()

population[&amp;#39;California&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 1
##   California
##        &amp;lt;dbl&amp;gt;
## 1   38332521&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;population %&amp;gt;% select(California:Illinois)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 3
##   California  Florida Illinois
##        &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
## 1   38332521 19552860 12882135&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;create-a-date-frame-using-an-list-2&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2.2&lt;/span&gt; Create a date frame using an list 2&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;area_dict = list(
  &amp;#39;California&amp;#39; = 423967, 
  &amp;#39;Florida&amp;#39; = 170312,
  &amp;#39;Illinois&amp;#39; = 149995,
  &amp;#39;New York&amp;#39; = 141297,
  &amp;#39;Texas&amp;#39; = 695662
  )
area_dict %&amp;gt;% as_tibble() -&amp;gt; area

area&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 5
##   California Florida Illinois `New York`  Texas
##        &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
## 1     423967  170312   149995     141297 695662&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;subsetting-an-data-frame-using-join-or-cbind&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2.3&lt;/span&gt; Subsetting an data frame using join or cbind&lt;/h3&gt;
&lt;p&gt;The tidy way doesn`t support indexes so we can tidy our data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tidy_area &amp;lt;- area %&amp;gt;% gather(key = &amp;quot;state&amp;quot;, value = &amp;quot;area&amp;quot;)
tidy_state &amp;lt;- population %&amp;gt;% gather(key = &amp;quot;state&amp;quot;, value = &amp;quot;population&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tidy_area&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 2
##   state        area
##   &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;
## 1 California 423967
## 2 Florida    170312
## 3 Illinois   149995
## 4 New York   141297
## 5 Texas      695662&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tidy_state&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 2
##   state      population
##   &amp;lt;chr&amp;gt;           &amp;lt;dbl&amp;gt;
## 1 California   38332521
## 2 Florida      19552860
## 3 Illinois     12882135
## 4 New York     19651127
## 5 Texas        26448193&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tidy_area %&amp;gt;% left_join(tidy_state)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = &amp;quot;state&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 3
##   state        area population
##   &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
## 1 California 423967   38332521
## 2 Florida    170312   19552860
## 3 Illinois   149995   12882135
## 4 New York   141297   19651127
## 5 Texas      695662   26448193&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tidy_merge &amp;lt;- cbind(tidy_area,tidy_state[,-1])

states &amp;lt;- tidy_merge&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;some-info-on-our-data-frame&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2.4&lt;/span&gt; Some info on our data frame&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(tidy_merge)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;data.frame&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(tidy_merge$population)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;numeric&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(list(tidy_merge[&amp;quot;population&amp;quot;]))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;list&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;states %&amp;gt;% dim()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 5 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;states %&amp;gt;% str()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    5 obs. of  3 variables:
##  $ state     : chr  &amp;quot;California&amp;quot; &amp;quot;Florida&amp;quot; &amp;quot;Illinois&amp;quot; &amp;quot;New York&amp;quot; ...
##  $ area      : num  423967 170312 149995 141297 695662
##  $ population: num  38332521 19552860 12882135 19651127 26448193&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;states %&amp;gt;% glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Observations: 5
## Variables: 3
## $ state      &amp;lt;chr&amp;gt; &amp;quot;California&amp;quot;, &amp;quot;Florida&amp;quot;, &amp;quot;Illinois&amp;quot;, &amp;quot;New York&amp;quot;, &amp;quot;T...
## $ area       &amp;lt;dbl&amp;gt; 423967, 170312, 149995, 141297, 695662
## $ population &amp;lt;dbl&amp;gt; 38332521, 19552860, 12882135, 19651127, 26448193&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;states[[&amp;quot;Estado&amp;quot;]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;states %&amp;gt;% colnames() %&amp;gt;% tail(-1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;area&amp;quot;       &amp;quot;population&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;states$area&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 423967 170312 149995 141297 695662&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-new-columns-using-mutate-and-basic-r&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2.5&lt;/span&gt; Creating new columns using mutate and basic R&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;states$density &amp;lt;-  states$population / states$area
states&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        state   area population   density
## 1 California 423967   38332521  90.41393
## 2    Florida 170312   19552860 114.80612
## 3   Illinois 149995   12882135  85.88376
## 4   New York 141297   19651127 139.07675
## 5      Texas 695662   26448193  38.01874&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# or
states$density &amp;lt;-  states[[&amp;quot;population&amp;quot;]] / states[[&amp;quot;area&amp;quot;]]
states&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        state   area population   density
## 1 California 423967   38332521  90.41393
## 2    Florida 170312   19552860 114.80612
## 3   Illinois 149995   12882135  85.88376
## 4   New York 141297   19651127 139.07675
## 5      Texas 695662   26448193  38.01874&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#or
states %&amp;gt;% 
  mutate(density = population / area)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        state   area population   density
## 1 California 423967   38332521  90.41393
## 2    Florida 170312   19552860 114.80612
## 3   Illinois 149995   12882135  85.88376
## 4   New York 141297   19651127 139.07675
## 5      Texas 695662   26448193  38.01874&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;ordering-an-data-frame-using-the-tidy-way-arrange-or-order.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2.6&lt;/span&gt; Ordering an data frame using the tidy way arrange or order.&lt;/h3&gt;
&lt;p&gt;You can also use -c() or desc() sometimes -c() can give strange results.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;states %&amp;gt;% arrange(desc(population))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        state   area population   density
## 1 California 423967   38332521  90.41393
## 2      Texas 695662   26448193  38.01874
## 3   New York 141297   19651127 139.07675
## 4    Florida 170312   19552860 114.80612
## 5   Illinois 149995   12882135  85.88376&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;states[order(states$area),]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        state   area population   density
## 4   New York 141297   19651127 139.07675
## 3   Illinois 149995   12882135  85.88376
## 2    Florida 170312   19552860 114.80612
## 1 California 423967   38332521  90.41393
## 5      Texas 695662   26448193  38.01874&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Mix and match all three formas
states %&amp;gt;% arrange(-c(density),desc(population,area),state)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        state   area population   density
## 1   New York 141297   19651127 139.07675
## 2    Florida 170312   19552860 114.80612
## 3 California 423967   38332521  90.41393
## 4   Illinois 149995   12882135  85.88376
## 5      Texas 695662   26448193  38.01874&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;filtering-rows-using-standard-r-code-or-filter.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2.7&lt;/span&gt; Filtering rows using standard R code or filter.&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;states[1:3,]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        state   area population   density
## 1 California 423967   38332521  90.41393
## 2    Florida 170312   19552860 114.80612
## 3   Illinois 149995   12882135  85.88376&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_pop &amp;lt;- states[states$population &amp;gt; 19552860 &amp;amp; states$area &amp;gt; 423967,]
data_pop&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   state   area population  density
## 5 Texas 695662   26448193 38.01874&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;states %&amp;gt;% 
  filter(population &amp;gt; 19552860 &amp;amp; area &amp;gt; 423967)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   state   area population  density
## 1 Texas 695662   26448193 38.01874&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you can mix and match filter for rows and select for columns.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;states %&amp;gt;% 
  filter(density &amp;gt; 100)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      state   area population  density
## 1  Florida 170312   19552860 114.8061
## 2 New York 141297   19651127 139.0767&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;states %&amp;gt;%
  filter(density &amp;gt; 100) %&amp;gt;% 
  select(population,density)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   population  density
## 1   19552860 114.8061
## 2   19651127 139.0767&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;states[1,4]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 90.41393&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;real-case&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.3&lt;/span&gt; Real Case&lt;/h2&gt;
&lt;div id=&#34;two-way-of-importing-an-csv&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.3.1&lt;/span&gt; Two way of importing an csv&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales &amp;lt;- read_csv(&amp;#39;2019-03-23-exploratory-data-analysis-basic-pandas-and-dplyr/UKretail.csv&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   InvoiceNo = col_character(),
##   StockCode = col_character(),
##   Description = col_character(),
##   Quantity = col_double(),
##   InvoiceDate = col_datetime(format = &amp;quot;&amp;quot;),
##   UnitPrice = col_double(),
##   CustomerID = col_double(),
##   Country = col_character()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales &amp;lt;- read.csv(&amp;#39;2019-03-23-exploratory-data-analysis-basic-pandas-and-dplyr/UKretail.csv&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you think this looks like an ugly path and a was of space I would agree we
can fix this by using one of my favorite thinks from python the &#34;&#34;key I avoided.&lt;br /&gt;
I am now using it on the python part to show the power of neat line.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;path_file = &amp;#39;\
2019-03-23-exploratory-data-analysis-basic-pandas-and-dplyr/\
UKretail.csv&amp;#39; &lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales &amp;lt;- read_csv(py$path_file)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   InvoiceNo = col_character(),
##   StockCode = col_character(),
##   Description = col_character(),
##   Quantity = col_double(),
##   InvoiceDate = col_datetime(format = &amp;quot;&amp;quot;),
##   UnitPrice = col_double(),
##   CustomerID = col_double(),
##   Country = col_character()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally our first usefull python to r functionality!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;lets-look-at-our-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.3.2&lt;/span&gt; Let’s look at our data&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales %&amp;gt;% head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 8
##   InvoiceNo StockCode Description Quantity InvoiceDate         UnitPrice
##   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt; &amp;lt;dttm&amp;gt;                  &amp;lt;dbl&amp;gt;
## 1 536365    22752     SET 7 BABU~        2 2010-12-01 08:26:02      7.65
## 2 536365    71053     WHITE META~        6 2010-12-01 08:26:02      3.39
## 3 536365    84029G    KNITTED UN~        6 2010-12-01 08:26:02      3.39
## 4 536365    85123A    WHITE HANG~        6 2010-12-01 08:26:02      2.55
## 5 536366    22633     HAND WARME~        6 2010-12-01 08:28:02      1.85
## 6 536367    21754     HOME BUILD~        3 2010-12-01 08:33:59      5.95
## # ... with 2 more variables: CustomerID &amp;lt;dbl&amp;gt;, Country &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales %&amp;gt;% tail(3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 8
##   InvoiceNo StockCode Description Quantity InvoiceDate         UnitPrice
##   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt; &amp;lt;dttm&amp;gt;                  &amp;lt;dbl&amp;gt;
## 1 581587    22899     CHILDREN&amp;#39;S~        6 2011-12-09 12:49:59      2.1 
## 2 581587    23254     CHILDRENS ~        4 2011-12-09 12:49:59      4.15
## 3 581587    23256     CHILDRENS ~        4 2011-12-09 12:49:59      4.15
## # ... with 2 more variables: CustomerID &amp;lt;dbl&amp;gt;, Country &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;r_types_columns&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.3.3&lt;/span&gt; Types of columns r&lt;/h3&gt;
&lt;p&gt;If you payed attention read_ tries to inform what conversion was used in each column that is specially cool because base R tends to create unesceassary factor whne in fact you are working with strings, but know you can choose between three different implementation of the read command.&lt;/p&gt;
&lt;p&gt;A cool thing about tibbles is that they are in fact still data.frame.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales %&amp;gt;% class()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;spec_tbl_df&amp;quot; &amp;quot;tbl_df&amp;quot;      &amp;quot;tbl&amp;quot;         &amp;quot;data.frame&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pay attention to the R difference between “[[” and “[” if you recall this is the “opposite” of the python behavior.&lt;br /&gt;
Jump to &lt;a href=&#34;#py_types_columns&#34;&gt;python implementation&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales[[&amp;quot;CustomerID&amp;quot;]] %&amp;gt;% class()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;numeric&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales[&amp;quot;CustomerID&amp;quot;] %&amp;gt;% class()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;tbl_df&amp;quot;     &amp;quot;tbl&amp;quot;        &amp;quot;data.frame&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;basic-description-real-data-using-glimpse-and-str&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.3.4&lt;/span&gt; Basic Description real data using Glimpse and str&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales %&amp;gt;% dim()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 325145      8&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales %&amp;gt;% colnames()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;InvoiceNo&amp;quot;   &amp;quot;StockCode&amp;quot;   &amp;quot;Description&amp;quot; &amp;quot;Quantity&amp;quot;    &amp;quot;InvoiceDate&amp;quot;
## [6] &amp;quot;UnitPrice&amp;quot;   &amp;quot;CustomerID&amp;quot;  &amp;quot;Country&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales %&amp;gt;% glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Observations: 325,145
## Variables: 8
## $ InvoiceNo   &amp;lt;chr&amp;gt; &amp;quot;536365&amp;quot;, &amp;quot;536365&amp;quot;, &amp;quot;536365&amp;quot;, &amp;quot;536365&amp;quot;, &amp;quot;536366&amp;quot;, ...
## $ StockCode   &amp;lt;chr&amp;gt; &amp;quot;22752&amp;quot;, &amp;quot;71053&amp;quot;, &amp;quot;84029G&amp;quot;, &amp;quot;85123A&amp;quot;, &amp;quot;22633&amp;quot;, &amp;quot;21...
## $ Description &amp;lt;chr&amp;gt; &amp;quot;SET 7 BABUSHKA NESTING BOXES&amp;quot;, &amp;quot;WHITE METAL LANTE...
## $ Quantity    &amp;lt;dbl&amp;gt; 2, 6, 6, 6, 6, 3, 3, 4, 6, 6, 6, 8, 4, 3, 3, 48, 2...
## $ InvoiceDate &amp;lt;dttm&amp;gt; 2010-12-01 08:26:02, 2010-12-01 08:26:02, 2010-12...
## $ UnitPrice   &amp;lt;dbl&amp;gt; 7.65, 3.39, 3.39, 2.55, 1.85, 5.95, 5.95, 7.95, 1....
## $ CustomerID  &amp;lt;dbl&amp;gt; 17850, 17850, 17850, 17850, 17850, 13047, 13047, 1...
## $ Country     &amp;lt;chr&amp;gt; &amp;quot;United Kingdom&amp;quot;, &amp;quot;United Kingdom&amp;quot;, &amp;quot;United Kingdo...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales %&amp;gt;% str()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &amp;#39;spec_tbl_df&amp;#39;, &amp;#39;tbl_df&amp;#39;, &amp;#39;tbl&amp;#39; and &amp;#39;data.frame&amp;#39;: 325145 obs. of  8 variables:
##  $ InvoiceNo  : chr  &amp;quot;536365&amp;quot; &amp;quot;536365&amp;quot; &amp;quot;536365&amp;quot; &amp;quot;536365&amp;quot; ...
##  $ StockCode  : chr  &amp;quot;22752&amp;quot; &amp;quot;71053&amp;quot; &amp;quot;84029G&amp;quot; &amp;quot;85123A&amp;quot; ...
##  $ Description: chr  &amp;quot;SET 7 BABUSHKA NESTING BOXES&amp;quot; &amp;quot;WHITE METAL LANTERN&amp;quot; &amp;quot;KNITTED UNION FLAG HOT WATER BOTTLE&amp;quot; &amp;quot;WHITE HANGING HEART T-LIGHT HOLDER&amp;quot; ...
##  $ Quantity   : num  2 6 6 6 6 3 3 4 6 6 ...
##  $ InvoiceDate: POSIXct, format: &amp;quot;2010-12-01 08:26:02&amp;quot; &amp;quot;2010-12-01 08:26:02&amp;quot; ...
##  $ UnitPrice  : num  7.65 3.39 3.39 2.55 1.85 5.95 5.95 7.95 1.65 2.1 ...
##  $ CustomerID : num  17850 17850 17850 17850 17850 ...
##  $ Country    : chr  &amp;quot;United Kingdom&amp;quot; &amp;quot;United Kingdom&amp;quot; &amp;quot;United Kingdom&amp;quot; &amp;quot;United Kingdom&amp;quot; ...
##  - attr(*, &amp;quot;spec&amp;quot;)=
##   .. cols(
##   ..   InvoiceNo = col_character(),
##   ..   StockCode = col_character(),
##   ..   Description = col_character(),
##   ..   Quantity = col_double(),
##   ..   InvoiceDate = col_datetime(format = &amp;quot;&amp;quot;),
##   ..   UnitPrice = col_double(),
##   ..   CustomerID = col_double(),
##   ..   Country = col_character()
##   .. )&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales %&amp;gt;% summary()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   InvoiceNo          StockCode         Description       
##  Length:325145      Length:325145      Length:325145     
##  Class :character   Class :character   Class :character  
##  Mode  :character   Mode  :character   Mode  :character  
##                                                          
##                                                          
##                                                          
##                                                          
##     Quantity          InvoiceDate                    UnitPrice        
##  Min.   :-80995.00   Min.   :2010-12-01 08:26:02   Min.   :-11062.06  
##  1st Qu.:     1.00   1st Qu.:2011-03-28 12:13:02   1st Qu.:     1.25  
##  Median :     3.00   Median :2011-07-20 10:50:59   Median :     2.08  
##  Mean   :     9.27   Mean   :2011-07-04 14:11:43   Mean   :     4.85  
##  3rd Qu.:    10.00   3rd Qu.:2011-10-19 10:47:59   3rd Qu.:     4.13  
##  Max.   : 12540.00   Max.   :2011-12-09 12:49:59   Max.   : 38970.00  
##                                                                       
##    CustomerID      Country         
##  Min.   :12347   Length:325145     
##  1st Qu.:13959   Class :character  
##  Median :15150   Mode  :character  
##  Mean   :15289                     
##  3rd Qu.:16793                     
##  Max.   :18287                     
##  NA&amp;#39;s   :80991&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you agree with me that summary sucks on a data.frame object I am glad to show skimr, also if you don’t like summary behaviour on model outputs &lt;a href=&#34;https://cran.r-project.org/web/packages/broom/index.html&#34;&gt;broom&lt;/a&gt; is there to save you, I will talk more about when I make an &lt;a href=&#34;https://scikit-learn.org/stable/&#34;&gt;scikit-learn&lt;/a&gt; and &lt;a href=&#34;https://topepo.github.io/caret/&#34;&gt;caret&lt;/a&gt; + &lt;a href=&#34;https://www.tidyverse.org/articles/2018/08/tidymodels-0-0-1/&#34;&gt;tidymodels&lt;/a&gt; post.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;subsetting-data-with-select-or-base-r&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.3.5&lt;/span&gt; Subsetting Data with select or base R&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales[1:4,]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 8
##   InvoiceNo StockCode Description Quantity InvoiceDate         UnitPrice
##   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt; &amp;lt;dttm&amp;gt;                  &amp;lt;dbl&amp;gt;
## 1 536365    22752     SET 7 BABU~        2 2010-12-01 08:26:02      7.65
## 2 536365    71053     WHITE META~        6 2010-12-01 08:26:02      3.39
## 3 536365    84029G    KNITTED UN~        6 2010-12-01 08:26:02      3.39
## 4 536365    85123A    WHITE HANG~        6 2010-12-01 08:26:02      2.55
## # ... with 2 more variables: CustomerID &amp;lt;dbl&amp;gt;, Country &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales$CustomerID %&amp;gt;% head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 17850 17850 17850 17850 17850 13047&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales[[&amp;quot;CustomerID&amp;quot;]] %&amp;gt;% head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 17850 17850 17850 17850 17850 13047&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales[,3] %&amp;gt;% head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 1
##   Description                        
##   &amp;lt;chr&amp;gt;                              
## 1 SET 7 BABUSHKA NESTING BOXES       
## 2 WHITE METAL LANTERN                
## 3 KNITTED UNION FLAG HOT WATER BOTTLE
## 4 WHITE HANGING HEART T-LIGHT HOLDER 
## 5 HAND WARMER UNION JACK             
## 6 HOME BUILDING BLOCK WORD&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales[1:5,3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 1
##   Description                        
##   &amp;lt;chr&amp;gt;                              
## 1 SET 7 BABUSHKA NESTING BOXES       
## 2 WHITE METAL LANTERN                
## 3 KNITTED UNION FLAG HOT WATER BOTTLE
## 4 WHITE HANGING HEART T-LIGHT HOLDER 
## 5 HAND WARMER UNION JACK&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales$Revenue2 &amp;lt;- sales$Quantity * sales$UnitPrice

sales[[&amp;quot;Revenue3&amp;quot;]] &amp;lt;- sales[[&amp;quot;Quantity&amp;quot;]] * sales[[&amp;quot;UnitPrice&amp;quot;]]

# () show created objects 
# Strange behavior right here 6 rowns on head()
(sales &amp;lt;- sales %&amp;gt;% mutate(Revenue = Quantity * UnitPrice)) %&amp;gt;% head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 11
##   InvoiceNo StockCode Description Quantity InvoiceDate         UnitPrice
##   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt; &amp;lt;dttm&amp;gt;                  &amp;lt;dbl&amp;gt;
## 1 536365    22752     SET 7 BABU~        2 2010-12-01 08:26:02      7.65
## 2 536365    71053     WHITE META~        6 2010-12-01 08:26:02      3.39
## 3 536365    84029G    KNITTED UN~        6 2010-12-01 08:26:02      3.39
## 4 536365    85123A    WHITE HANG~        6 2010-12-01 08:26:02      2.55
## 5 536366    22633     HAND WARME~        6 2010-12-01 08:28:02      1.85
## 6 536367    21754     HOME BUILD~        3 2010-12-01 08:33:59      5.95
## # ... with 5 more variables: CustomerID &amp;lt;dbl&amp;gt;, Country &amp;lt;chr&amp;gt;,
## #   Revenue2 &amp;lt;dbl&amp;gt;, Revenue3 &amp;lt;dbl&amp;gt;, Revenue &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum(sales$Revenue == sales$Revenue2)/nrow(sales)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum(sales$Revenue == sales$Revenue3)/nrow(sales)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum(sales$Revenue2 == sales$Revenue3)/nrow(sales)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# If there were any differences between our columns the sum would return &amp;lt;1    &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-a-new-smaller-data-frame-using-transmute-and-base&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.3.6&lt;/span&gt; Creating a new smaller data frame using transmute and base&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;raw_sales &amp;lt;- sales %&amp;gt;% select(Quantity, UnitPrice, Revenue)

raw_sales %&amp;gt;% head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
##   Quantity UnitPrice Revenue
##      &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
## 1        2      7.65    15.3
## 2        6      3.39    20.3
## 3        6      3.39    20.3
## 4        6      2.55    15.3
## 5        6      1.85    11.1
## 6        3      5.95    17.8&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;raw_sales %&amp;gt;% glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Observations: 325,145
## Variables: 3
## $ Quantity  &amp;lt;dbl&amp;gt; 2, 6, 6, 6, 6, 3, 3, 4, 6, 6, 6, 8, 4, 3, 3, 48, 24,...
## $ UnitPrice &amp;lt;dbl&amp;gt; 7.65, 3.39, 3.39, 2.55, 1.85, 5.95, 5.95, 7.95, 1.65...
## $ Revenue   &amp;lt;dbl&amp;gt; 15.30, 20.34, 20.34, 15.30, 11.10, 17.85, 17.85, 31....&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;raw_sales %&amp;gt;% skimr::skim()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Skim summary statistics
##  n obs: 325145 
##  n variables: 3 
## 
## -- Variable type:numeric ------------------------------------------------
##   variable missing complete      n  mean     sd         p0  p25  p50   p75
##   Quantity       0   325145 325145  9.27 154.39  -80995    1    3    10   
##    Revenue       0   325145 325145 17.43 331.85 -168469.6  3.4  9.48 17.4 
##  UnitPrice       0   325145 325145  4.85 116.83  -11062.06 1.25 2.08  4.13
##   p100     hist
##  12540 &amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2587&amp;gt;&amp;lt;U+2581&amp;gt;
##  38970 &amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2587&amp;gt;&amp;lt;U+2581&amp;gt;
##  38970 &amp;lt;U+2581&amp;gt;&amp;lt;U+2587&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;ploting-with-ggplot&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.3.7&lt;/span&gt; Ploting with ggplot&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales %&amp;gt;% ggplot() +
  aes(x = InvoiceDate, y = Revenue) +
  geom_line()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019/2019-03/2019-03-23/1/index_files/figure-html/exploratory_data1-68-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;filtering_r&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.3.8&lt;/span&gt; Filtering and replace data&lt;/h3&gt;
&lt;p&gt;Here I really couldn`t figure out an easy way to filter using this
cancel tricky that works in &lt;a href=&#34;#filtering_py&#34;&gt;python&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cancels = sales$Revenue &amp;lt; 0
cancels %&amp;gt;% nrow()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;invert_func &amp;lt;- function(cancel){
  ifelse(cancel == 1,
         0,
         1)
  }


sales2 = sales[invert_func(cancels),]

sales2 %&amp;gt;% dim()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 319557     11&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I really prefer the tidy way also.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales &amp;lt;- sales %&amp;gt;% filter(Revenue &amp;gt; 0)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;groupby-example-in-tidyverse&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.3.9&lt;/span&gt; Groupby example in tidyverse&lt;/h3&gt;
&lt;p&gt;I prefer the tidy way here as well.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;CountryGroups &amp;lt;- sales %&amp;gt;% 
  group_by(Country) %&amp;gt;% 
  summarise(sum_revenue = sum(Revenue),
            number_cases = n()) %&amp;gt;% 
  arrange(-sum_revenue)

CountryGroups&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 38 x 3
##    Country        sum_revenue number_cases
##    &amp;lt;chr&amp;gt;                &amp;lt;dbl&amp;gt;        &amp;lt;int&amp;gt;
##  1 United Kingdom    5311080.       291129
##  2 EIRE               176305.         4788
##  3 Netherlands        165583.         1391
##  4 Germany            138778.         5465
##  5 France             127194.         5025
##  6 Australia           79198.          726
##  7 Spain               36117.         1420
##  8 Switzerland         34315.         1169
##  9 Belgium             24015.         1191
## 10 Norway              23182.          658
## # ... with 28 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;skimr::skim(sales)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Skim summary statistics
##  n obs: 318036 
##  n variables: 11 
## 
## -- Variable type:character ----------------------------------------------
##     variable missing complete      n min max empty n_unique
##      Country       0   318036 318036   3  20     0       38
##  Description       0   318036 318036   6  35     0     3926
##    InvoiceNo       0   318036 318036   6   7     0    19107
##    StockCode       0   318036 318036   1  12     0     3835
## 
## -- Variable type:numeric ------------------------------------------------
##    variable missing complete      n     mean      sd        p0      p25
##  CustomerID   79261   238775 318036 15295.34 1713.1  12347     13969   
##    Quantity       0   318036 318036    10.25   38.3      1         1   
##     Revenue       0   318036 318036    19.78  104.17     0.001     3.75
##    Revenue2       0   318036 318036    19.78  104.17     0.001     3.75
##    Revenue3       0   318036 318036    19.78  104.17     0.001     3.75
##   UnitPrice       0   318036 318036     3.96   42.53     0.001     1.25
##       p50      p75     p100     hist
##  15157    16800    18287    &amp;lt;U+2587&amp;gt;&amp;lt;U+2586&amp;gt;&amp;lt;U+2587&amp;gt;&amp;lt;U+2587&amp;gt;&amp;lt;U+2586&amp;gt;&amp;lt;U+2586&amp;gt;&amp;lt;U+2586&amp;gt;&amp;lt;U+2587&amp;gt;
##      3       10     4800    &amp;lt;U+2587&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;
##      9.9     17.7  38970    &amp;lt;U+2587&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;
##      9.9     17.7  38970    &amp;lt;U+2587&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;
##      9.9     17.7  38970    &amp;lt;U+2587&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;
##      2.08     4.13 13541.33 &amp;lt;U+2587&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;
## 
## -- Variable type:POSIXct ------------------------------------------------
##     variable missing complete      n        min        max     median
##  InvoiceDate       0   318036 318036 2010-12-01 2011-12-09 2011-07-20
##  n_unique
##     17750&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;ploting-an-histogram-using-ggplot2&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.3.10&lt;/span&gt; Ploting an histogram using ggplot2&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales %&amp;gt;%
  filter(CustomerID == 17850) %&amp;gt;% 
  ggplot() +
  aes(Revenue) +
  geom_histogram(bins = 20)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019/2019-03/2019-03-23/1/index_files/figure-html/exploratory_data1-73-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Another example.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales %&amp;gt;%
  filter(StockCode == 71053) %&amp;gt;% 
  ggplot() +
  aes(Revenue) +
  geom_histogram(bins = 20)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019/2019-03/2019-03-23/1/index_files/figure-html/exploratory_data1-74-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;missing_values_r&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.3.11&lt;/span&gt; Handling Missing values in R&lt;/h3&gt;
&lt;p&gt;Ok I got hand this one to &lt;a href=&#34;#missing_values_py&#34;&gt;python&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales2$CustomerID %&amp;gt;% 
  table(useNA = &amp;#39;always&amp;#39;) %&amp;gt;%
  sort(decreasing = TRUE) %&amp;gt;%
  head(3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## .
##  17850   &amp;lt;NA&amp;gt; 
## 319557      0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is just not simple enough luckly we can create functions for our afflictions, plus this is replacement as an side effect which sucks.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#sales[sales[[&amp;quot;CustomerID&amp;quot;]] %&amp;gt;% is.na(),&amp;quot;CustomerID&amp;quot;] &amp;lt;- 0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is an way better tidy way.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# sales %&amp;gt;% mutate_if(is.numeric, funs(replace(., is.na(.), 0)))
sales2 &amp;lt;- sales %&amp;gt;% mutate_at(vars(CustomerID),
                    list(
                      ~replace(.,
                              is.na(.), # function that check condition (na)
                              0) # value to replace could be mean(.,na.rm = T)
                      )
                    )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using an stronger method like mice even with an &lt;a href=&#34;https://cran.r-project.org/web/packages/micemd/index.html&#34;&gt;amazing multicore package&lt;/a&gt; takes too long for an blogpost, plus I really don’t think there should be an model for CustomerID here is some workflow if you need to split your data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;non_character_sales &amp;lt;- sales %&amp;gt;%
  select_if(function(col)
    is.numeric(col) |
      is.factor(col))

# or my favorite
select_cases &amp;lt;- function(col) {
  is.numeric(col) |
  is.factor(col)
}

non_character_sales &amp;lt;- sales %&amp;gt;% select_if(select_cases)

non_character_sales %&amp;gt;% head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 6
##   Quantity UnitPrice CustomerID Revenue2 Revenue3 Revenue
##      &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
## 1        2      7.65      17850     15.3     15.3    15.3
## 2        6      3.39      17850     20.3     20.3    20.3
## 3        6      3.39      17850     20.3     20.3    20.3
## 4        6      2.55      17850     15.3     15.3    15.3
## 5        6      1.85      17850     11.1     11.1    11.1
## 6        3      5.95      13047     17.8     17.8    17.8&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;character_sales &amp;lt;- sales %&amp;gt;% select_if(negate(is.numeric))

character_sales %&amp;gt;% head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 5
##   InvoiceNo StockCode Description            InvoiceDate         Country   
##   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;                  &amp;lt;dttm&amp;gt;              &amp;lt;chr&amp;gt;     
## 1 536365    22752     SET 7 BABUSHKA NESTIN~ 2010-12-01 08:26:02 United Ki~
## 2 536365    71053     WHITE METAL LANTERN    2010-12-01 08:26:02 United Ki~
## 3 536365    84029G    KNITTED UNION FLAG HO~ 2010-12-01 08:26:02 United Ki~
## 4 536365    85123A    WHITE HANGING HEART T~ 2010-12-01 08:26:02 United Ki~
## 5 536366    22633     HAND WARMER UNION JACK 2010-12-01 08:28:02 United Ki~
## 6 536367    21754     HOME BUILDING BLOCK W~ 2010-12-01 08:33:59 United Ki~&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales3 &amp;lt;- cbind(character_sales,non_character_sales)

# if you need the same order

sales3 &amp;lt;- sales3 %&amp;gt;% select(names(sales)) &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;replacing-names-with-an-case-when-aproach&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.3.12&lt;/span&gt; Replacing names with an case when aproach&lt;/h3&gt;
&lt;p&gt;Don’t mix and match numbers and characters else this will cause an error.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;replace_function &amp;lt;-  function(country) {
  case_when(
  country == &amp;#39;United Kingdom&amp;#39; ~ &amp;quot;1&amp;quot;,
  country == &amp;#39;Netherlands&amp;#39; ~ &amp;quot;2&amp;quot;,
  country == &amp;#39;Germany&amp;#39; ~ &amp;quot;3&amp;quot;,
  country == &amp;#39;France&amp;#39; ~ &amp;quot;4&amp;quot;,
  country == &amp;#39;USA&amp;#39; ~ &amp;quot;5&amp;quot;,
  TRUE    ~ country
)
  }&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales3 &amp;lt;- sales3 %&amp;gt;% mutate(new = replace_function(Country))

sales3 %&amp;gt;% head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   InvoiceNo StockCode                         Description Quantity
## 1    536365     22752        SET 7 BABUSHKA NESTING BOXES        2
## 2    536365     71053                 WHITE METAL LANTERN        6
## 3    536365    84029G KNITTED UNION FLAG HOT WATER BOTTLE        6
## 4    536365    85123A  WHITE HANGING HEART T-LIGHT HOLDER        6
## 5    536366     22633              HAND WARMER UNION JACK        6
## 6    536367     21754            HOME BUILDING BLOCK WORD        3
##           InvoiceDate UnitPrice CustomerID        Country Revenue2
## 1 2010-12-01 08:26:02      7.65      17850 United Kingdom    15.30
## 2 2010-12-01 08:26:02      3.39      17850 United Kingdom    20.34
## 3 2010-12-01 08:26:02      3.39      17850 United Kingdom    20.34
## 4 2010-12-01 08:26:02      2.55      17850 United Kingdom    15.30
## 5 2010-12-01 08:28:02      1.85      17850 United Kingdom    11.10
## 6 2010-12-01 08:33:59      5.95      13047 United Kingdom    17.85
##   Revenue3 Revenue new
## 1    15.30   15.30   1
## 2    20.34   20.34   1
## 3    20.34   20.34   1
## 4    15.30   15.30   1
## 5    11.10   11.10   1
## 6    17.85   17.85   1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Two ways of solving our case_count deficiency.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;value_counts &amp;lt;- function(column, useNA = &amp;#39;always&amp;#39;, decreasing = TRUE) {
  column %&amp;gt;% 
  table(useNA = useNA) %&amp;gt;%
  sort(decreasing = decreasing)
}

sales3[[&amp;quot;new&amp;quot;]] %&amp;gt;% value_counts() %&amp;gt;% head(7)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## .
##       1       3       4    EIRE   Spain       2 Belgium 
##  291129    5465    5025    4788    1420    1391    1191&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;passing-objects-to-python&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.4&lt;/span&gt; Passing Objects to Python&lt;/h2&gt;
&lt;p&gt;Simple example.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sales2 = r.sales2
type(sales2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;pandas.core.frame.DataFrame&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can solve our value_counts problem by simply stealing from python then returning the results to r.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sales3_solution = \
r.\
sales3.\
new.\
value_counts().\
nlargest(7)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we want to continue working in r after the steal.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales3_solution = py$sales3_solution
sales3_solution&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       1       3       4    EIRE   Spain       2 Belgium 
##  291129    5465    5025    4788    1420    1391    1191&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/7zW0iLn9SKYao6f8sE/giphy.gif&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
