<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tidymodels on TwoSidesData</title>
    <link>https://twosidesdata.netlify.com/tags/tidymodels/</link>
    <description>Recent content in tidymodels on TwoSidesData</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Aug 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/tidymodels/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Classification - KNN</title>
      <link>https://twosidesdata.netlify.com/2019/08/15/classification-knn/</link>
      <pubDate>Thu, 15 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://twosidesdata.netlify.com/2019/08/15/classification-knn/</guid>
      <description>
&lt;script src=&#34;https://twosidesdata.netlify.com/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://twosidesdata.netlify.com/rmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://twosidesdata.netlify.com/rmarkdown-libs/datatables-css/datatables-crosstalk.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://twosidesdata.netlify.com/rmarkdown-libs/datatables-binding/datatables.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://twosidesdata.netlify.com/rmarkdown-libs/dt-core/css/jquery.dataTables.min.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;link href=&#34;https://twosidesdata.netlify.com/rmarkdown-libs/dt-core/css/jquery.dataTables.extra.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://twosidesdata.netlify.com/rmarkdown-libs/dt-core/js/jquery.dataTables.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://twosidesdata.netlify.com/rmarkdown-libs/crosstalk/css/crosstalk.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://twosidesdata.netlify.com/rmarkdown-libs/crosstalk/js/crosstalk.min.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Breast Cancer problem.&lt;/p&gt;
&lt;p&gt;This is a problem that I have trid to solve using just the old tidymodels package and got stuck so here is the new implementation using the amazing tune and workflows
packages&lt;/p&gt;
&lt;div id=&#34;setting-up-rmarkdown&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Setting up Rmarkdown&lt;/h1&gt;
&lt;p&gt;root.dir =&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;loading-libraries&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Loading Libraries&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Attaching packages ---------------------------------------------------------------------------------------------------------------------------------------------- tidyverse 1.3.0 --&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;U+2713&amp;gt; ggplot2 3.2.1     &amp;lt;U+2713&amp;gt; purrr   0.3.3
## &amp;lt;U+2713&amp;gt; tibble  2.1.3     &amp;lt;U+2713&amp;gt; dplyr   0.8.3
## &amp;lt;U+2713&amp;gt; tidyr   1.0.0     &amp;lt;U+2713&amp;gt; stringr 1.4.0
## &amp;lt;U+2713&amp;gt; readr   1.3.1     &amp;lt;U+2713&amp;gt; forcats 0.4.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Conflicts ------------------------------------------------------------------------------------------------------------------------------------------------- tidyverse_conflicts() --
## x dplyr::filter() masks stats::filter()
## x dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidymodels)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Registered S3 method overwritten by &amp;#39;xts&amp;#39;:
##   method     from
##   as.zoo.xts zoo&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Attaching packages --------------------------------------------------------------------------------------------------------------------------------------------- tidymodels 0.0.3 --&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;U+2713&amp;gt; broom     0.5.3     &amp;lt;U+2713&amp;gt; recipes   0.1.8
## &amp;lt;U+2713&amp;gt; dials     0.0.4     &amp;lt;U+2713&amp;gt; rsample   0.0.5
## &amp;lt;U+2713&amp;gt; infer     0.5.1     &amp;lt;U+2713&amp;gt; yardstick 0.0.4
## &amp;lt;U+2713&amp;gt; parsnip   0.0.4&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Conflicts ------------------------------------------------------------------------------------------------------------------------------------------------ tidymodels_conflicts() --
## x scales::discard()   masks purrr::discard()
## x dplyr::filter()     masks stats::filter()
## x recipes::fixed()    masks stringr::fixed()
## x dplyr::lag()        masks stats::lag()
## x dials::margin()     masks ggplot2::margin()
## x yardstick::spec()   masks readr::spec()
## x recipes::step()     masks stats::step()
## x recipes::yj_trans() masks scales::yj_trans()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(janitor)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;janitor&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:stats&amp;#39;:
## 
##     chisq.test, fisher.test&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(skimr)
library(DataExplorer)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Loading Libraries: 3.65 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Getting Data&lt;/h1&gt;
&lt;p&gt;Got the dataset with headers on &lt;a href=&#34;https://www.kaggle.com/uciml/breast-cancer-wisconsin-data/version/2&#34;&gt;kaggle link&lt;/a&gt;, there is also a cool explanation about the problem there.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- read_csv(&amp;quot;breast_cancer.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Missing column names filled in: &amp;#39;X33&amp;#39; [33]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   .default = col_double(),
##   diagnosis = col_character(),
##   X33 = col_character()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## See spec(...) for full column specifications.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: 569 parsing failures.
## row col   expected     actual                file
##   1  -- 33 columns 32 columns &amp;#39;breast_cancer.csv&amp;#39;
##   2  -- 33 columns 32 columns &amp;#39;breast_cancer.csv&amp;#39;
##   3  -- 33 columns 32 columns &amp;#39;breast_cancer.csv&amp;#39;
##   4  -- 33 columns 32 columns &amp;#39;breast_cancer.csv&amp;#39;
##   5  -- 33 columns 32 columns &amp;#39;breast_cancer.csv&amp;#39;
## ... ... .......... .......... ...................
## See problems(...) for more details.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Set Chunk: 0.16 sec elapsed&lt;/p&gt;
&lt;p&gt;There is a strange extra column named X33 dealing with that using janitor package&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- df %&amp;gt;% 
  janitor::remove_empty_cols()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: &amp;#39;janitor::remove_empty_cols&amp;#39; is deprecated.
## Use &amp;#39;remove_empty(&amp;quot;cols&amp;quot;)&amp;#39; instead.
## See help(&amp;quot;Deprecated&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cleaning Data: 0.01 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;visualizing-the-data-using-dataexplorer-and-skimr&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Visualizing the data using DataExplorer and Skimr&lt;/h1&gt;
&lt;div id=&#34;skimr-is-a-fast-way-to-get-info-on-your-data-even-though-the-hist-plot-fails-on-my-blog&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Skimr is a fast way to get info on your data even though the hist plot fails on my blog :(&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df %&amp;gt;% 
  skimr::skim()&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;caption&gt;&lt;span id=&#34;tab:Skimr&#34;&gt;Table 1: &lt;/span&gt;Data summary&lt;/caption&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Name&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Piped data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Number of rows&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;569&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Number of columns&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;_______________________&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Column type frequency:&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;character&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;________________________&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Group variables&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Variable type: character&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;skim_variable&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;n_missing&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;complete_rate&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;min&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;max&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;empty&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;n_unique&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;whitespace&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;diagnosis&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Variable type: numeric&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;skim_variable&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;n_missing&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;complete_rate&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;sd&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p0&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p25&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p50&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p75&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p100&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;hist&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;id&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;30371831.43&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;125020585.61&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8670.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;869218.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;906024.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8813129.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;911320502.00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▁▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;radius_mean&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.98&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.70&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15.78&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28.11&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▂▇▃▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;texture_mean&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19.29&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.30&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.71&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.17&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.84&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.80&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39.28&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▃▇▃▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;perimeter_mean&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;91.97&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.30&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;43.79&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;75.17&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;86.24&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;104.10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;188.50&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▃▇▃▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;area_mean&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;654.89&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;351.91&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;143.50&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;420.30&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;551.10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;782.70&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2501.00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▃▂▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;smoothness_mean&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.16&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▇▇▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;compactness_mean&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.06&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.35&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▇▂▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;concavity_mean&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.08&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.06&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.43&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▃▂▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;concave points_mean&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.04&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.20&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▃▂▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;symmetry_mean&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.20&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.30&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▇▅▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;fractal_dimension_mean&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.06&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.06&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.06&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.10&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▆▇▂▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;radius_se&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.41&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.87&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▁▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;texture_se&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.55&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.36&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.83&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.47&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.88&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▅▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;perimeter_se&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.76&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.61&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.29&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.36&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.98&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▁▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;area_se&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40.34&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;45.49&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.80&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17.85&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.53&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;45.19&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;542.20&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▁▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;smoothness_se&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.03&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▃▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;compactness_se&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.14&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▃▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;concavity_se&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.04&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.40&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▁▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;concave points_se&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.05&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▇▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;symmetry_se&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.08&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▃▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;fractal_dimension_se&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.03&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▁▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;radius_worst&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.27&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.83&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.93&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.97&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.79&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;36.04&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▆▇▃▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;texture_worst&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.08&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.41&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;29.72&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.54&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▃▇▆▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;perimeter_worst&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;107.26&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;33.60&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.41&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;84.11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;97.66&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;125.40&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;251.20&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▇▃▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;area_worst&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;880.58&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;569.36&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;185.20&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;515.30&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;686.50&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1084.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4254.00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▂▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;smoothness_worst&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.22&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▂▇▇▂▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;compactness_worst&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.21&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.34&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.06&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▅▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;concavity_worst&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.27&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.21&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.38&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.25&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▅▂▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;concave points_worst&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.06&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.29&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▅▇▅▃▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;symmetry_worst&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.29&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.06&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.66&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▅▇▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;fractal_dimension_worst&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.08&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.06&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.08&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.21&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▃▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Skimr: 0.15 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;data-explorer&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data Explorer&lt;/h2&gt;
&lt;p&gt;Is a imho a prettier option with individual cool plots and a super powerfull(but slow) report creation tool when working outside of an Rmarkdownm document&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df %&amp;gt;% 
  DataExplorer::plot_intro()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://twosidesdata.netlify.com/post/2019/08/15/index_files/figure-html/Data%20Explorer%20%20individual%20plots-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df %&amp;gt;% 
  DataExplorer::plot_bar()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://twosidesdata.netlify.com/post/2019/08/15/index_files/figure-html/Data%20Explorer%20%20individual%20plots-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df %&amp;gt;% 
  DataExplorer::plot_correlation()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://twosidesdata.netlify.com/post/2019/08/15/index_files/figure-html/Data%20Explorer%20%20individual%20plots-3.png&#34; width=&#34;672&#34; /&gt;Data Explorer individual plots: 1.05 sec elapsed&lt;/p&gt;
&lt;p&gt;There are much more amaziong tools such as the &lt;a href=&#34;https://www.data-imaginist.com/2019/a-flurry-of-facets/&#34;&gt;ggforce package&lt;/a&gt; , but I hope you get the gist of the exploration stage.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;modeling&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Modeling&lt;/h1&gt;
&lt;p&gt;For now I am going to focus on the tools provided by the tidymodels packages and the KNN, in the future I may come back to add more models and probably to play around the DALEX package a little bit.&lt;/p&gt;
&lt;p&gt;Just to remember M is Malignant and B is Benign, we are trying to correcly classify our patients, I am going to ignore the id Varible since it should not be reliaded upon to generate predictions(Even though it may capture some interesting effects such as better screening for patients on the latter id’s).&lt;/p&gt;
&lt;div id=&#34;train-test-split&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Train Test Split&lt;/h2&gt;
&lt;p&gt;Usually we split our data into training and test data to ensure a fair evaluation of the models or parameters being tested(hoping to avoid overfitting).&lt;/p&gt;
&lt;p&gt;The workflow for the tidymodels is that we first split our data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_split &amp;lt;- df %&amp;gt;% 
  rsample::initial_split(prop = 0.8)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Initial Split: 0 sec elapsed&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_training &amp;lt;- df_split %&amp;gt;% training()
df_testing &amp;lt;- df_split %&amp;gt;% testing()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Train test split: 0.02 sec elapsed&lt;/p&gt;
&lt;p&gt;Then we model on our Training Data&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;recipes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Recipes&lt;/h2&gt;
&lt;p&gt;Recipes are used to preprocess our data, the main mistake here is using the whole data set.&lt;/p&gt;
&lt;p&gt;The recipe package helps us with this process.&lt;/p&gt;
&lt;p&gt;For those not familiarized with the formula notation I am fitting the model on all variables except the id variable.&lt;/p&gt;
&lt;p&gt;I am than Normalizing my data since the KNN alghoritm is sensible to the scale of the variables being used, I am also excluding variables with high absolute correlation amongst themselves.&lt;/p&gt;
&lt;p&gt;Recipes are easy to read and can be quite complex&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_recipe &amp;lt;- training(df_split) %&amp;gt;% 
  recipe(diagnosis ~ .) %&amp;gt;%
  step_rm(id) %&amp;gt;% 
  step_center(all_predictors()) %&amp;gt;% 
  step_scale(all_predictors(),all_numeric()) %&amp;gt;% 
  step_corr(all_predictors())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;recipes: 0 sec elapsed&lt;/p&gt;
&lt;p&gt;We could then create our train and test data frames by baking our recipe and juicing our recipe&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# df_testing &amp;lt;- df_recipe %&amp;gt;% 
#   bake(testing(df_split))
# df_testing
#df_training &amp;lt;- juice(df_recipe)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;unnamed-chunk-1: 0 sec elapsed&lt;/p&gt;
&lt;p&gt;But I am going for a Bayes search approch&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;cross-validation-and-bayes-search&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Cross Validation and Bayes Search&lt;/h2&gt;
&lt;div id=&#34;cross-validation&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Cross Validation&lt;/h3&gt;
&lt;p&gt;We further divide our data frame into folds in order to improve our certainty that the ideal number of neighbours is right.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cv_splits &amp;lt;- df_testing %&amp;gt;% vfold_cv(v = 5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cvfold split: 0.02 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-the-new-tune-package-currently-on-github&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Using the new tune package currently on github&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tune)
knn_mod &amp;lt;- 
  nearest_neighbor(neighbors = tune(), weight_func = tune()) %&amp;gt;% 
  set_engine(&amp;quot;kknn&amp;quot;) %&amp;gt;% 
  set_mode(&amp;quot;classification&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;unnamed-chunk-2: 0.05 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;combining-everything-so-far-in-the-new-package-workflow&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Combining everything so far in the new package workflow&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(workflows)
knn_wflow &amp;lt;- 
  workflow() %&amp;gt;% 
  add_model(knn_mod) %&amp;gt;% 
  add_recipe(df_recipe)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;unnamed-chunk-3: 0.04 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;limiting-our-search&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Limiting our search&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knn_param &amp;lt;- 
  knn_wflow %&amp;gt;% 
  parameters() %&amp;gt;% 
    update(
    neighbors = neighbors(c(3, 50)),
    weight_func = weight_func(values = c(&amp;quot;rectangular&amp;quot;, &amp;quot;inv&amp;quot;, &amp;quot;gaussian&amp;quot;, &amp;quot;triangular&amp;quot;))
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;unnamed-chunk-4: 0.03 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;searching-for-the-best-model&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Searching for the best model&lt;/h3&gt;
&lt;p&gt;I used 5 iterations as the limit for the process because of printing reasons.&lt;/p&gt;
&lt;p&gt;Keep in mind that mtune will maximize just the first metric from the package yardstick&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ctrl &amp;lt;- control_bayes(verbose = TRUE,no_improve = 5)
set.seed(42)
knn_search &amp;lt;- tune_bayes(knn_wflow,
                         resamples = cv_splits,
                         initial = 5,
                         iter = 20,
                         param_info = knn_param,
                         control = ctrl,
                         metrics = metric_set(roc_auc,accuracy))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;gt;  Generating a set of 5 initial parameter results&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## v Initialization complete&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Optimizing roc_auc using the expected improvement&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Iteration 1 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Current best:      roc_auc=0.9706 (@iter 0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Gaussian process model&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## v Gaussian process model&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Generating 139 candidates&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Predicted candidates&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i neighbors=31, weight_func=inv&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Estimating performance&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## v Estimating performance&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;U+24E7&amp;gt; Newest results: roc_auc=0.969 (+/-0.013)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Iteration 2 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Current best:      roc_auc=0.9706 (@iter 0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Gaussian process model&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## v Gaussian process model&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Generating 138 candidates&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Predicted candidates&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i neighbors=3, weight_func=rectangular&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Estimating performance&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## v Estimating performance&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;U+24E7&amp;gt; Newest results: roc_auc=0.9538 (+/-0.0208)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Iteration 3 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Current best:      roc_auc=0.9706 (@iter 0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Gaussian process model&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## v Gaussian process model&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Generating 137 candidates&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Predicted candidates&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i neighbors=50, weight_func=rectangular&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Estimating performance&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## v Estimating performance&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;U+24E7&amp;gt; Newest results: roc_auc=0.9432 (+/-0.0214)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Iteration 4 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Current best:      roc_auc=0.9706 (@iter 0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Gaussian process model&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## v Gaussian process model&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Generating 136 candidates&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Predicted candidates&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i neighbors=15, weight_func=rectangular&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Estimating performance&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## v Estimating performance&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;U+24E7&amp;gt; Newest results: roc_auc=0.9676 (+/-0.0184)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Iteration 5 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Current best:      roc_auc=0.9706 (@iter 0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Gaussian process model&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## v Gaussian process model&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Generating 135 candidates&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Predicted candidates&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i neighbors=3, weight_func=gaussian&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## i Estimating performance&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## v Estimating performance&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;U+24E7&amp;gt; Newest results: roc_auc=0.9562 (+/-0.0205)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ! No improvement for 5 iterations; returning current results.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bayes Search: 26.38 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;visualizing-our-search&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Visualizing our search&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;autoplot(knn_search, type = &amp;quot;performance&amp;quot;, metric = &amp;quot;accuracy&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://twosidesdata.netlify.com/post/2019/08/15/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;unnamed-chunk-5: 0.16 sec elapsed&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;autoplot(knn_search, type = &amp;quot;performance&amp;quot;, metric = &amp;quot;roc_auc&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://twosidesdata.netlify.com/post/2019/08/15/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;unnamed-chunk-6: 0.2 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;seing-the-best-result&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Seing the best result&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;collect_metrics(knn_search) %&amp;gt;% 
  dplyr::filter(.metric == &amp;quot;accuracy&amp;quot;) %&amp;gt;% 
  arrange(mean %&amp;gt;% desc)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 8
##    neighbors weight_func .iter .metric  .estimator  mean     n std_err
##        &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;
##  1         3 gaussian        5 accuracy binary     0.939     5  0.0261
##  2         3 rectangular     2 accuracy binary     0.939     5  0.0261
##  3         5 inv             0 accuracy binary     0.939     5  0.0295
##  4        13 inv             0 accuracy binary     0.939     5  0.0221
##  5        42 gaussian        0 accuracy binary     0.939     5  0.0294
##  6        15 rectangular     4 accuracy binary     0.938     5  0.0263
##  7        33 inv             0 accuracy binary     0.930     5  0.0259
##  8        31 inv             1 accuracy binary     0.929     5  0.0222
##  9        27 rectangular     0 accuracy binary     0.921     5  0.0253
## 10        50 rectangular     3 accuracy binary     0.859     5  0.0207&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;unnamed-chunk-7: 0.03 sec elapsed&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;collect_metrics(knn_search) %&amp;gt;% 
  dplyr::filter(.metric == &amp;quot;roc_auc&amp;quot;) %&amp;gt;% 
  arrange(mean %&amp;gt;% desc)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 8
##    neighbors weight_func .iter .metric .estimator  mean     n std_err
##        &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;
##  1        33 inv             0 roc_auc binary     0.971     5  0.0165
##  2        31 inv             1 roc_auc binary     0.969     5  0.0130
##  3        42 gaussian        0 roc_auc binary     0.968     5  0.0182
##  4        15 rectangular     4 roc_auc binary     0.968     5  0.0184
##  5        13 inv             0 roc_auc binary     0.967     5  0.0203
##  6        27 rectangular     0 roc_auc binary     0.961     5  0.0168
##  7         5 inv             0 roc_auc binary     0.959     5  0.0182
##  8         3 gaussian        5 roc_auc binary     0.956     5  0.0205
##  9         3 rectangular     2 roc_auc binary     0.954     5  0.0208
## 10        50 rectangular     3 roc_auc binary     0.943     5  0.0214&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;unnamed-chunk-8: 0.03 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;extracting-the-best-model&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Extracting the best model&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;best_metrics &amp;lt;- collect_metrics(knn_search) %&amp;gt;% 
  dplyr::filter(.metric == &amp;quot;roc_auc&amp;quot;) %&amp;gt;% 
  arrange(mean %&amp;gt;% desc) %&amp;gt;% 
  head(1) %&amp;gt;% 
  select(neighbors,weight_func) %&amp;gt;% 
  as.list()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;unnamed-chunk-9: 0.01 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-production-model&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Creating production model&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;production_knn &amp;lt;-  
  nearest_neighbor(neighbors = best_metrics$neighbors,weight_func = best_metrics$weight_func) %&amp;gt;% 
  set_engine(&amp;quot;kknn&amp;quot;) %&amp;gt;% 
  set_mode(&amp;quot;classification&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;unnamed-chunk-10: 0 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-production-wflow&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Creating production wflow&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;production_wflow &amp;lt;-   workflow() %&amp;gt;% 
  add_model(production_knn) %&amp;gt;% 
  add_recipe(df_recipe)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;unnamed-chunk-11: 0 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;finally-applying-testing-production-model&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Finally applying testing production model&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fit_prod &amp;lt;- fit(production_wflow,df_training)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fitting production: 0.28 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;metrics&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Metrics&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fit_prod %&amp;gt;% predict(df_testing) %&amp;gt;% 
  bind_cols(df_testing %&amp;gt;% transmute(diagnosis = diagnosis %&amp;gt;% as.factor())) %&amp;gt;% 
  yardstick::metrics(truth = diagnosis,estimate = .pred_class)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 3
##   .metric  .estimator .estimate
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;
## 1 accuracy binary         0.965
## 2 kap      binary         0.926&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Calculating metrics: 0.03 sec elapsed&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;predict(fit_prod,df_testing,type = &amp;#39;prob&amp;#39;) %&amp;gt;%
  bind_cols(df_testing %&amp;gt;% transmute(diagnosis = diagnosis %&amp;gt;% as.factor())) %&amp;gt;% 
  yardstick::roc_auc(truth = diagnosis,.pred_B)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 3
##   .metric .estimator .estimate
##   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;
## 1 roc_auc binary         0.989&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Calculating metrics auc: 0.04 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;another-visualization&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Another visualization&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knn_naive &amp;lt;- 
  nearest_neighbor(neighbors = tune()) %&amp;gt;% 
  set_engine(&amp;quot;kknn&amp;quot;) %&amp;gt;% 
  set_mode(&amp;quot;classification&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;unnamed-chunk-12: 0 sec elapsed&lt;/p&gt;
&lt;div id=&#34;combining-everything-so-far-in-the-new-package-workflow-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Combining everything so far in the new package workflow&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knn_wflow_naive &amp;lt;- 
  workflow() %&amp;gt;% 
  add_model(knn_naive) %&amp;gt;% 
  add_recipe(df_recipe)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;unnamed-chunk-13: 0 sec elapsed&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knn_naive_param &amp;lt;- 
  knn_wflow %&amp;gt;% 
  parameters() %&amp;gt;% 
    update(
    neighbors = neighbors(c(10, 50))
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;unnamed-chunk-14: 0.02 sec elapsed&lt;/p&gt;
&lt;p&gt;One advantage of the naive search is that it is easy to parallelize&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all_cores &amp;lt;- parallel::detectCores(logical = FALSE)

library(doParallel)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: foreach&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;foreach&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:purrr&amp;#39;:
## 
##     accumulate, when&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: iterators&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: parallel&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cl &amp;lt;- makePSOCKcluster(all_cores)
registerDoParallel(cl)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;set up parallel: 1.29 sec elapsed&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ctrl &amp;lt;- control_grid(verbose = FALSE)
set.seed(42)
naive_search &amp;lt;- tune_grid(knn_wflow_naive,
                         resamples = cv_splits,
                         param_info = knn_naive_param,
                         control = ctrl,
                         grid = 50,
                         metrics = metric_set(roc_auc,accuracy))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;naive grid search: 6.31 sec elapsed&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;best_naive_metrics &amp;lt;- collect_metrics(naive_search) %&amp;gt;% 
  dplyr::filter(.metric == &amp;quot;roc_auc&amp;quot;) %&amp;gt;% 
  arrange(mean %&amp;gt;% desc)
DT::datatable(best_naive_metrics,options = list(pageLength = 5, scrollX=T))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:auto;&#34; class=&#34;datatables html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;filter&#34;:&#34;none&#34;,&#34;data&#34;:[[&#34;1&#34;,&#34;2&#34;,&#34;3&#34;,&#34;4&#34;,&#34;5&#34;,&#34;6&#34;,&#34;7&#34;,&#34;8&#34;,&#34;9&#34;,&#34;10&#34;,&#34;11&#34;,&#34;12&#34;,&#34;13&#34;,&#34;14&#34;,&#34;15&#34;,&#34;16&#34;,&#34;17&#34;,&#34;18&#34;,&#34;19&#34;,&#34;20&#34;,&#34;21&#34;,&#34;22&#34;,&#34;23&#34;,&#34;24&#34;,&#34;25&#34;,&#34;26&#34;,&#34;27&#34;,&#34;28&#34;,&#34;29&#34;,&#34;30&#34;,&#34;31&#34;,&#34;32&#34;,&#34;33&#34;,&#34;34&#34;,&#34;35&#34;,&#34;36&#34;,&#34;37&#34;],[18,20,24,25,26,28,29,30,31,32,17,21,34,35,22,23,15,16,36,37,38,39,40,41,42,46,10,11,12,13,14,43,44,45,47,48,49],[&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;,&#34;roc_auc&#34;],[&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;,&#34;binary&#34;],[0.974487179487179,0.974487179487179,0.973717948717949,0.973717948717949,0.973717948717949,0.973717948717949,0.973717948717949,0.973717948717949,0.973717948717949,0.973717948717949,0.972948717948718,0.972820512820513,0.972179487179487,0.972179487179487,0.972051282051282,0.972051282051282,0.971410256410256,0.971410256410256,0.970641025641026,0.970641025641026,0.970641025641026,0.970641025641026,0.970641025641026,0.970641025641026,0.970641025641026,0.970641025641026,0.969871794871795,0.969871794871795,0.969871794871795,0.969871794871795,0.969871794871795,0.969102564102564,0.969102564102564,0.969102564102564,0.969102564102564,0.969102564102564,0.969102564102564],[10,10,5,5,10,10,5,10,5,10,5,5,10,5,10,5,5,5,5,5,10,5,5,5,10,10,5,5,5,5,10,5,5,5,5,5,10],[0.00941568502832165,0.00941568502832165,0.0146765476846401,0.0146765476846401,0.00978436512309337,0.00978436512309337,0.0146765476846401,0.00978436512309337,0.0146765476846401,0.00978436512309337,0.0152483279604168,0.0134532941787636,0.0105578910181491,0.0158368365272237,0.00933992910550258,0.0140098936582539,0.0159840485902653,0.0159840485902653,0.0165285201685211,0.0165285201685211,0.0110190134456807,0.0165285201685211,0.0165285201685211,0.0165285201685211,0.0110190134456807,0.01089902787098,0.0168286018698568,0.0168286018698568,0.0168286018698568,0.0168286018698568,0.0112190679132379,0.0173295208976781,0.0173295208976781,0.0173295208976781,0.0173295208976781,0.0173295208976781,0.0115530139317854]],&#34;container&#34;:&#34;&lt;table class=\&#34;display\&#34;&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt; &lt;\/th&gt;\n      &lt;th&gt;neighbors&lt;\/th&gt;\n      &lt;th&gt;.metric&lt;\/th&gt;\n      &lt;th&gt;.estimator&lt;\/th&gt;\n      &lt;th&gt;mean&lt;\/th&gt;\n      &lt;th&gt;n&lt;\/th&gt;\n      &lt;th&gt;std_err&lt;\/th&gt;\n    &lt;\/tr&gt;\n  &lt;\/thead&gt;\n&lt;\/table&gt;&#34;,&#34;options&#34;:{&#34;pageLength&#34;:5,&#34;scrollX&#34;:true,&#34;columnDefs&#34;:[{&#34;className&#34;:&#34;dt-right&#34;,&#34;targets&#34;:[1,4,5,6]},{&#34;orderable&#34;:false,&#34;targets&#34;:0}],&#34;order&#34;:[],&#34;autoWidth&#34;:false,&#34;orderClasses&#34;:false,&#34;lengthMenu&#34;:[5,10,25,50,100]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;unnamed-chunk-15: 0.03 sec elapsed&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p &amp;lt;- best_naive_metrics %&amp;gt;% 
  ggplot() +
  aes(neighbors,mean) +
  geom_point() +
  ylim(.95,1)
p&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://twosidesdata.netlify.com/post/2019/08/15/index_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;672&#34; /&gt;unnamed-chunk-16: 0.16 sec elapsed&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;checking-the-timing-table&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Checking the timing table&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(x &amp;lt;- tic.log() %&amp;gt;%
  as.character() %&amp;gt;% 
  tibble(log = .) %&amp;gt;% 
  separate(log,sep = &amp;#39;: &amp;#39;,into = c(&amp;#39;name&amp;#39;,&amp;#39;time&amp;#39;))) %&amp;gt;% 
  separate(time, sep = &amp;#39; &amp;#39;,c(&amp;#39;measure&amp;#39;,&amp;#39;units&amp;#39;)) %&amp;gt;%
  mutate(measure = measure %&amp;gt;% as.numeric()) %&amp;gt;% 
  arrange(measure %&amp;gt;% desc())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Expected 2 pieces. Additional pieces discarded in 31 rows [1, 2, 3, 4,
## 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...].&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 31 x 3
##    name                            measure units
##    &amp;lt;chr&amp;gt;                             &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;
##  1 Bayes Search                      26.4  sec  
##  2 naive grid search                  6.31 sec  
##  3 Loading Libraries                  3.65 sec  
##  4 set up parallel                    1.29 sec  
##  5 Data Explorer  individual plots    1.05 sec  
##  6 Fitting production                 0.28 sec  
##  7 unnamed-chunk-6                    0.2  sec  
##  8 Set Chunk                          0.16 sec  
##  9 unnamed-chunk-5                    0.16 sec  
## 10 unnamed-chunk-16                   0.16 sec  
## # … with 21 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;unnamed-chunk-17: 0.02 sec elapsed&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
